<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-02T02:32:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法设计与分析</title>
    <link href="http://yoursite.com/2018/04/02/arithmetic/"/>
    <id>http://yoursite.com/2018/04/02/arithmetic/</id>
    <published>2018-04-02T02:24:14.000Z</published>
    <updated>2018-04-02T02:32:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="渐进符号"><a href="#渐进符号" class="headerlink" title="渐进符号"></a>渐进符号</h3><ul><li>渐进上界</li><li>渐进下界</li><li>渐进紧致界</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;渐进符号&quot;&gt;&lt;a href=&quot;#渐进符号&quot; class=&quot;headerlink&quot; title=&quot;渐进符号&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>面向对象(设计模式)</title>
    <link href="http://yoursite.com/2018/03/29/object-oriented/"/>
    <id>http://yoursite.com/2018/03/29/object-oriented/</id>
    <published>2018-03-29T07:16:10.000Z</published>
    <updated>2018-04-03T00:24:54.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><p>面向对象的基本概念：</p><ul><li>对象</li><li>消息</li><li>类</li><li>继承</li><li>多态</li><li>动态绑定</li></ul><p>面向对象分析（OOA）包含5个活动：</p><ul><li>认定对象</li><li>组织对象</li><li>对象的相互作用</li><li>基于对象的操作</li><li>定义对象的内部信息</li></ul><p>面向对象设计（OOD）<br>遵循抽象、信息隐蔽、功能独立、模块化等设计原则。<br>1.面向对象设计的活动：</p><ul><li>识别类及对象</li><li>定义属性</li><li>定义服务</li><li>识别关系</li><li>识别包</li></ul><p>2.面向对象的设计的原则</p><ul><li>单一责任原则</li><li>开放-封闭原则</li><li>依赖倒置原则</li><li>接口分离原则</li><li>重用发布等价原则</li><li>共同封闭原则</li><li>共同重用原则</li><li>无环以来原则</li><li>稳定依赖原则</li><li>稳定抽象原则</li></ul><h2 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">production</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">clothes</span> <span class="keyword">implements</span>  <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">production</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"clothes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">toursers</span> <span class="keyword">implements</span>  <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">production</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"toursers"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="function">Product <span class="title">FactoryMethod</span><span class="params">(String produtType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreleCreator</span> <span class="keyword">implements</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">FactoryMethod</span><span class="params">(String produtType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (produtType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (produtType.equalsIgnoreCase(<span class="string">"CLOTHES"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> clothes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (produtType.equalsIgnoreCase(<span class="string">"TOURSERS"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> toursers();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> ConcreleCreator().FactoryMethod(<span class="string">"CLOTHES"</span>);</span><br><span class="line">        product.production();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工厂模式（反射）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    &lt;T extends Product&gt; <span class="function">T  <span class="title">FactoryMethod</span><span class="params">(Class&lt;T&gt; produtType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreleCreator</span> <span class="keyword">implements</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  &lt;T extends Product&gt; <span class="function">T <span class="title">FactoryMethod</span><span class="params">(Class&lt;T&gt; produtType)</span> </span>&#123;</span><br><span class="line">        T result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = (T) Class.forName(produtType.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clothes clothes = <span class="keyword">new</span> ConcreleCreator().FactoryMethod(Clothes.class);</span><br><span class="line">        clothes.production();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品A</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstructProductA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">product</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">implements</span> <span class="title">AbstructProductA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductA1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span>  <span class="keyword">implements</span> <span class="title">AbstructProductA</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductA2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品B</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstructProductB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">product</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">implements</span> <span class="title">AbstructProductB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductB1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span>  <span class="keyword">implements</span> <span class="title">AbstructProductB</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductB2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstructProductA <span class="title">createProductA</span><span class="params">(String productName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstructProductB <span class="title">createProductB</span><span class="params">(String productName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstructProductA <span class="title">createProductA</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (productName.equalsIgnoreCase(<span class="string">"ProductA1"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (productName.equalsIgnoreCase(<span class="string">"ProductA2"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstructProductB <span class="title">createProductB</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductBFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstructProductA <span class="title">createProductA</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstructProductB <span class="title">createProductB</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (productName == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (productName.equalsIgnoreCase(<span class="string">"ProductB1"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (productName.equalsIgnoreCase(<span class="string">"ProductB2"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ProductAFactory().createProductA(<span class="string">"ProductA1"</span>).product();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton object= Singleton.getInstance();</span><br><span class="line">        object.singletonOperation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象基础&quot;&gt;&lt;a href=&quot;#面向对象基础&quot; class=&quot;headerlink&quot; title=&quot;面向对象基础&quot;&gt;&lt;/a&gt;面向对象基础&lt;/h2&gt;&lt;p&gt;面向对象的基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;消息&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>结构化开发方法</title>
    <link href="http://yoursite.com/2018/03/29/structured-devMethod/"/>
    <id>http://yoursite.com/2018/03/29/structured-devMethod/</id>
    <published>2018-03-29T02:38:10.000Z</published>
    <updated>2018-03-29T02:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>无直接耦合</li><li>数据耦合</li><li>标记耦合</li><li>控制耦合</li><li>外部耦合</li><li>公共耦合</li><li>内部耦合</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;无直接耦合&lt;/li&gt;
&lt;li&gt;数据耦合&lt;/li&gt;
&lt;li&gt;标记耦合&lt;/li&gt;
&lt;li&gt;控制耦合&lt;/li&gt;
&lt;li&gt;外部耦合&lt;/li&gt;
&lt;li&gt;公共耦合&lt;/li&gt;
&lt;li&gt;内部耦合&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="http://yoursite.com/2018/03/27/software-engineering/"/>
    <id>http://yoursite.com/2018/03/27/software-engineering/</id>
    <published>2018-03-27T08:40:55.000Z</published>
    <updated>2018-03-29T07:16:23.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件工程概述"><a href="#软件工程概述" class="headerlink" title="软件工程概述"></a>软件工程概述</h2><h3 id="软件工程基本原理"><a href="#软件工程基本原理" class="headerlink" title="软件工程基本原理"></a>软件工程基本原理</h3><ul><li>用分阶段的生命周期计划严格管理</li><li>坚持进行阶段评审</li><li>实现严格的产品控制</li><li>采用现代程序设计技术</li><li>结构应能清楚审查</li><li>开发小组人员应少而精</li><li>承认不断改进软件工程时间的必要性</li></ul><h3 id="软件生存周期"><a href="#软件生存周期" class="headerlink" title="软件生存周期"></a>软件生存周期</h3><ul><li>可行性分析与项目开发计划</li><li>需求分析</li><li>概要设计</li><li>详细设计</li><li>编码</li><li>测试</li><li>维护</li></ul><h3 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h3><p><strong>能力成熟度模型(CMM):</strong></p><ul><li><strong>初始级（Initial）</strong>杂乱无章，甚至很混乱，几乎没有明确定义的步骤，项目的成功完全依赖个人的努力和英雄式的核心人物的作用。</li><li><strong>可重复级（Repeatable）</strong>可跟踪项目费用、进度和功能特性，有必要的过程准则来重复以前在同类项目中的成功。</li><li><strong>已定义级（Defined）</strong> 软件过程已经文档化，标准化，并综合成整个软件开发组织的标准软件过程。所有软件项目都采用根据实际情况修改后得到的标准软件过程来开发和维护软件。</li><li><strong>已管理级（Managed）</strong>制定了软件过程和产品质量的详细度量标准。软件过程的铲平质量都被开发组织的成员理解和控制。</li><li><strong>优化级（Optimized）</strong>加强了定量分析，通过来自过程的反馈和来自观念、新技术的反馈使过程不断持续地改进</li></ul><hr><h2 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h2><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><p>以文档驱动的，适合软件开发过程很明确的软件项目的模型。</p><h3 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h3><p>优点：</p><ul><li>第一个可交付版本所需要的成本和时间很少。</li><li>开发由增量表示的小系统所承担的风险不大。</li><li>由于很快发布了第一个版本，因此可以减少用户的需求变更。</li><li>运行增量投资，即在项目开始时，可以仅对一个或两个增量投资。</li></ul><p>缺点：</p><ul><li>如果没有对用户的变更要求进行规划，你吧么产生的初始增量可能会造成后来增量的不稳定。</li><li>如果需求不像早期思考的那样稳定和完整，那么一些增量就可能需要重新开发，重新发布。</li><li>管理发生的成本、进度和配置的复杂性可能会超出组织的能力。</li></ul><h3 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h3><p>原型方法比较适合于用户需求不清、需求经常变化的情况。当系统规模不是很大也不太复杂时，采用该方法。</p><h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><p>结合了瀑布模型和演化模型，分为如下4个工作步骤：</p><ul><li>制定计划。</li><li>风险分析。</li><li>实施工程。</li><li>用户评估。</li></ul><p>螺旋模型强调风险分析，适用于庞大，复杂且具有高风险的系统。</p><h3 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h3><p>是一种以用户需求为动力，已对象作为驱动的模型，适合于面向对象的开发方法，具有迭代性和无间隙性。<br>优点：</p><ul><li>各个阶段没有明显的界限，开发人员可以同步进行，提高软件的开发效率，节省时间。</li></ul><p>缺点：</p><ul><li>各个开发阶段是重叠的，在开发过程中需要大量的开发人员，不利于项目管理。</li><li>要求严格管理文档，使得审核的难度加大。</li></ul><h3 id="基于构建的开发模型"><a href="#基于构建的开发模型" class="headerlink" title="基于构建的开发模型"></a>基于构建的开发模型</h3><p>具有多螺旋模型的特点，它本质上是演化模型，需要以迭代的方式构建软件。其不同之处在于基于构建的开发模型采用预先打包的软件构建开发应用系统。</p><h3 id="统一过程（UP）模型"><a href="#统一过程（UP）模型" class="headerlink" title="统一过程（UP）模型"></a>统一过程（UP）模型</h3><p>是一种“用例和风险驱动，以架构为中心，迭代并且增量”的开发过程，由UML方法和工具支持。</p><p>4个技术阶段：</p><ul><li>起始阶段。</li><li>精化阶段。</li><li>构建阶段。</li><li>移交阶段。</li></ul><h3 id="敏捷方法"><a href="#敏捷方法" class="headerlink" title="敏捷方法"></a>敏捷方法</h3><ul><li>极限编程（XP）<br>四大价值观：沟通、简单性、反馈和勇气。<br>5个原则：快速反馈、简单性假设、逐步修改、提倡更改和优质工作。</li><li>水晶法（Crystal）</li><li>并列争求法（Scrum）</li><li>自适应软件开发（ASD）</li></ul><hr><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h3><ul><li>功能需求。（要做什么，何时做在何时一级如何修改或升级）</li><li>性能需求。（存储容量限制、执行速度、响应时间及吞吐量）</li><li>用户或人的因素。（用户使用计算机的熟练程度，用户错误操作的可能性）</li><li>环境需求。（外设、接口、地点、分布、湿度、磁场、系统、网络、数据库）</li><li>界面需求。</li><li>文档需求。</li><li>数据需求。（输入输出数据的格式、接受发送数据的频率、数据的准确性和精度）</li><li>资源使用需求。</li><li>安全保密要求。</li><li>可靠性要求。</li><li>软件陈本消耗和开发进度。</li><li>其它非功能性需求。（开发模式、维护性、验收标准…）</li></ul><h3 id="软件需求说明书"><a href="#软件需求说明书" class="headerlink" title="软件需求说明书"></a>软件需求说明书</h3><ul><li>数据描述</li><li>数据流图</li><li>数据字典描述</li><li>胸接口描述</li><li>内部接口说明</li><li>系统的功能描述</li><li>处理说明</li><li>系统设计的限制</li><li>系统的性能描述</li><li>性能参数</li><li>对系统进行测试的种类</li></ul><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p>怎么做？</p><h3 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h3><ul><li>设计软件系统总体结构</li><li>数据结构及数据库设计</li><li>编写该要设计文档</li><li>评审</li></ul><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><ul><li>算法设计</li><li>模块内的数据结构设计</li><li>数据库物理机构设计</li><li>其它设计</li><li>评审</li></ul><hr><h2 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h2><h3 id="系统测试的目的"><a href="#系统测试的目的" class="headerlink" title="系统测试的目的"></a>系统测试的目的</h3><p>系统测试是为了发现错误而执行程序的过程。</p><h3 id="系统测试的基本原则"><a href="#系统测试的基本原则" class="headerlink" title="系统测试的基本原则"></a>系统测试的基本原则</h3><ul><li>应尽早并不断地进行测试。</li><li>测试工作应该避免由原软件的人或小组承担。</li><li>要根据系统功能确定预期输出结果。</li><li>既要包含有效、合理的输入条件，也要包含不合理、失效的输入条件</li><li>在测试程序时，不仅要检验程序员是否做了该做的事，还要检验程序是否做了不该做的事</li><li>严格按照测试计划进行</li><li>妥善保存测试计划，测试用例</li><li>测试例子都是精心设计出来的，可以为重新测试或追加测试提供方便</li></ul><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>也成模块测试，侧重于模块中的内部处理逻辑和数据结构。</p><p>测试内容：</p><ul><li>模块接口</li><li>局部数据结构</li><li>重要的执行路径</li><li>出错处理</li><li>边界条件</li></ul><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><p>把模块按系统设计说明书的要求组合起来进行测试。</p><ul><li>自顶向下的集成测试</li><li>自底向上的集成测试</li><li>回归测试</li><li>冒烟测试</li></ul><h3 id="确认测试"><a href="#确认测试" class="headerlink" title="确认测试"></a>确认测试</h3><p>确认测试始于集成测试的结束，那是就已经测试完单个构建。</p><h3 id="系统测试-1"><a href="#系统测试-1" class="headerlink" title="系统测试"></a>系统测试</h3><p>各种集成测试和确认测试。</p><h3 id="测试web应用"><a href="#测试web应用" class="headerlink" title="测试web应用"></a>测试web应用</h3><p><strong>质量维度</strong></p><ul><li>内容</li><li>功能</li><li>结构</li><li>可用性</li><li>导航性</li><li>性能</li><li>兼容性</li><li>安全性</li></ul><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><ul><li>等价类划分</li><li>边界值分析</li><li>错误推测</li><li>因果图</li></ul><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><ul><li>语句覆盖（SC）<br>被测程序的每个语句至少执行一次。</li><li>判定覆盖 （DC）<br>每个判定的每种结果至少执行一次</li><li>条件覆盖 （CC）<br>每个条件的结果至少执行一次</li><li>判定/条件覆盖（CDC）<br>同时满足判定覆盖和条件覆盖</li><li>条件组合覆盖（MCC）<br>判定中所有可能的条件组合</li><li>路径覆盖</li></ul><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><ul><li>试探法</li><li>回溯法</li><li>对分查找法</li><li>归纳法</li><li>演绎法</li></ul><hr><h2 id="运行和维护知识"><a href="#运行和维护知识" class="headerlink" title="运行和维护知识"></a>运行和维护知识</h2><h3 id="系统转换"><a href="#系统转换" class="headerlink" title="系统转换"></a>系统转换</h3><ul><li>直接转换</li><li>并行转换</li><li>分段转换</li></ul><h3 id="系统可维护性的评价指标"><a href="#系统可维护性的评价指标" class="headerlink" title="系统可维护性的评价指标"></a>系统可维护性的评价指标</h3><ul><li>可理解性</li><li>可测试性</li><li>可修改性</li></ul><h3 id="软件维护"><a href="#软件维护" class="headerlink" title="软件维护"></a>软件维护</h3><ul><li>正确性维护</li><li>适应性维护</li><li>完善性维护</li><li>预防性维护</li></ul><h3 id="系统评价"><a href="#系统评价" class="headerlink" title="系统评价"></a>系统评价</h3><ul><li>立项评价</li><li>中期评价</li><li>结束评价</li></ul><h2 id="软件项目管理"><a href="#软件项目管理" class="headerlink" title="软件项目管理"></a>软件项目管理</h2><h3 id="软件项目管理设计的范围"><a href="#软件项目管理设计的范围" class="headerlink" title="软件项目管理设计的范围"></a>软件项目管理设计的范围</h3><p><strong>1、人员</strong></p><ul><li>项目管理人员（项目经理）</li><li>高级管理人员</li><li>开发人员</li><li>客户</li><li>最终用户</li></ul><p><strong>2、产品（软件环境）</strong></p><ul><li>项目环境</li><li>信息目标</li><li>功能和性能</li></ul><p><strong>3、过程</strong><br>选择过程模型</p><p><strong>4、项目</strong></p><ul><li>明确目标及过程</li><li>保持动力</li><li>跟踪进展</li><li>作出明智的决策</li><li>进行时候分析</li></ul><h3 id="软件项目估算"><a href="#软件项目估算" class="headerlink" title="软件项目估算"></a>软件项目估算</h3><p><strong>COCOMO估算模型</strong><br>基本COCOMO模型<br>E = a(L)^b<br>D = cE^d<br>E表示工作量，单位时人月；D表示开发时间，单位是月；L是项目的源代码估计值，单位是千行；a、b、c、d是常数</p><p>中级COCOMO模型<br>E = a(L^b)EAF<br>EAF是工作量调节因子</p><p><strong>Putnam估算模型</strong></p><h3 id="进度管理"><a href="#进度管理" class="headerlink" title="进度管理"></a>进度管理</h3><p>进度管理的基本原则：</p><ul><li>划分</li><li>相互依赖性</li><li>时间分配</li><li>工作量确认</li><li>确定责任</li><li>明确输出结果</li><li>确定里程碑</li></ul><p>进度安排：<br>Gantt图<br>PERT图</p><hr><h2 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h2><p>由质量保证、质量规划和质量控制三部分组成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件工程概述&quot;&gt;&lt;a href=&quot;#软件工程概述&quot; class=&quot;headerlink&quot; title=&quot;软件工程概述&quot;&gt;&lt;/a&gt;软件工程概述&lt;/h2&gt;&lt;h3 id=&quot;软件工程基本原理&quot;&gt;&lt;a href=&quot;#软件工程基本原理&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>操作系统知识</title>
    <link href="http://yoursite.com/2018/03/26/operating-system/"/>
    <id>http://yoursite.com/2018/03/26/operating-system/</id>
    <published>2018-03-26T06:24:55.000Z</published>
    <updated>2018-03-27T06:58:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h2><h3 id="操作系统的基本概念"><a href="#操作系统的基本概念" class="headerlink" title="操作系统的基本概念"></a>操作系统的基本概念</h3><p>操作系统的4个特征：<strong>并发行</strong>、<strong>共享性</strong>、<strong>虚拟性</strong>和<strong>不确定性</strong>。</p><p>操作系统功能的5大部分：<strong>进程管理</strong>、<strong>文件管理</strong>、<strong>存储管理</strong>、<strong>设备管理</strong>和<strong>作业管理</strong>。</p><h3 id="操作系统的分类及特点"><a href="#操作系统的分类及特点" class="headerlink" title="操作系统的分类及特点"></a>操作系统的分类及特点</h3><p><strong>1. 批处理操作系统</strong></p><p>单道批处理：一次只有一个作业装入内存执行，作业由用户程序、数据和作业说明书（作业控制用语言）3个部分组成。</p><p>多道批处理：多道、宏观上并行运行、微观上串行运行。</p><p><strong>2.分时操作系统</strong></p><p>特点：多路性、独立性、交互性和及时性。</p><p><strong>3.实时操作系统</strong></p><p><strong>4.网络操作系统</strong></p><p><strong>6.分布式操作系统</strong></p><p><strong>7.嵌入式操作系统</strong></p><p>微型化、可定制、实时性、可靠性、易移植性。</p><hr><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>死锁产生的4个必要条件：互斥条件、请求保持条件、不可剥夺条件和环路条件</p><p>死锁预防： 预先静态分配法，资源有序分配法</p><p>死锁避免：银行家算法</p><p>死锁解除：资源剥夺法、撤销进程法</p><hr><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><p>存储管理的主要功能包括主存空间的分配和回收、提高主存的利用率、扩充主存、对主存信息实现有效保护。</p><h3 id="地址重定位"><a href="#地址重定位" class="headerlink" title="地址重定位"></a>地址重定位</h3><p>地址重定位是指将逻辑地址转换为物理地址的过程。分为<strong>静态重定位</strong>和<strong>动态重定位</strong>。</p><h3 id="存储管理方案"><a href="#存储管理方案" class="headerlink" title="存储管理方案"></a>存储管理方案</h3><h3 id="分页存储管理"><a href="#分页存储管理" class="headerlink" title="分页存储管理"></a>分页存储管理</h3><p>分页地址结构： 页号 + 页内地址</p><p>若页的大小为2K，则可推断出页内地址有11位，反之亦然。</p><h3 id="虚拟存储管理"><a href="#虚拟存储管理" class="headerlink" title="虚拟存储管理"></a>虚拟存储管理</h3><p><strong>页面置换算法（重点）：</strong>最佳置换算法、先进先出（FIFO）置换算法、最近最少未使用（LRU）置换算法</p><hr><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><p>管理对象：实际I/O操作的设备（如键盘、鼠标、打印机等）、设备控制器、DMA控制器、中断控制器、I/O处理机（通道）等。</p><p>管理目标：如何提高设备的利用率，为用户提供方便、统一的界面。</p><p>主要技术：中断技术、DMA技术、通道技术和缓冲技术。</p><p>主要任务：保证在多道程序环境下，当多个进程竞争使用设备时，按一定的策略分配和管理各种设备，控制设备的各种操作，完成I/O设备与主存之间的数据交换。</p><p>主要功能：动态地掌握并记录设备的状态、设备的分配和释放、缓冲区管理、实现物理I/O设备的操作、提供设备使用的用户接口及设备的访问和控制。</p><h3 id="设备管理采用的相关技术"><a href="#设备管理采用的相关技术" class="headerlink" title="设备管理采用的相关技术"></a>设备管理采用的相关技术</h3><p>通道技术、DMA技术、缓冲技术、Spooling技术。</p><h3 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h3><p>磁盘调度的目标是使进程对磁盘的平均寻道时间最短。</p><p><strong>1、磁盘驱动调度</strong></p><p>1）先来先服务（FCFS）算法：它按照输入输出请求到达的顺序，逐一完成访问请求，它只考虑请求访问者的先后顺序，而不考虑它们要访问的物理位置。</p><p>2）最短查找时间优先（SSTF）算法： 先对最靠近当前柱面位置的请求进行服务，即先对寻找时间最短的请求进行服务。</p><p>3）SCAN算法</p><p>4）C-SCAN算法：与SCAN算法相似，但达到另一端时，会马上折回磁盘的开始端。</p><p><strong>2、旋转调度算法</strong></p><p>旋转调度应该考虑如下情况：</p><ol><li>进程请求的是同一磁道上不同编号的扇区。</li><li>进程请求访问的是不同磁道上不同编号的扇区。</li><li>进程请求访问的是不同磁道上具有相同编号的扇区。</li></ol><hr><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>文件系统的功能：按名存取、统一的用户接口、并发和访问控制、安全性控制、优化性能、差错恢复。</p><h3 id="文件的结构和组织"><a href="#文件的结构和组织" class="headerlink" title="文件的结构和组织"></a>文件的结构和组织</h3><p><strong>1、文件的逻辑结构：</strong></p><ol><li>有结构的纪录式文件：定长记录和变长记录。</li><li>无机构的流式文件。</li></ol><p><strong>2、文件的物理结构：</strong></p><ol><li>连续结构。</li><li>链接结构。</li><li>索引结构。</li><li>多个物理块的索引表。</li></ol><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><p>文件控制块（FCB）的有序集合称为文件目录</p><p><strong>1、文件控制块</strong></p><ul><li>基本信息类（文件名、问价你的无力地址、文件长度和文件块数）</li><li>存取控制信息类（文件的存取权限。。）</li><li>使用信息类（文件简历日期，最后一次修改日期）</li></ul><p><strong>2、文件存储空间的管理</strong></p><ul><li>空闲区表。</li><li>位示图。</li><li>空闲块链。</li><li>成组连接法。</li></ul><hr><h2 id="作业管理"><a href="#作业管理" class="headerlink" title="作业管理"></a>作业管理</h2><h3 id="作业调度算法"><a href="#作业调度算法" class="headerlink" title="作业调度算法"></a>作业调度算法</h3><ul><li>先来先服务</li><li>短作业优先</li><li>响应比高优先</li><li>优先级调度算法</li><li>均衡调度算法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作系统概述&quot;&gt;&lt;a href=&quot;#操作系统概述&quot; class=&quot;headerlink&quot; title=&quot;操作系统概述&quot;&gt;&lt;/a&gt;操作系统概述&lt;/h2&gt;&lt;h3 id=&quot;操作系统的基本概念&quot;&gt;&lt;a href=&quot;#操作系统的基本概念&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://yoursite.com/2018/03/22/data-struct/"/>
    <id>http://yoursite.com/2018/03/22/data-struct/</id>
    <published>2018-03-22T01:35:48.000Z</published>
    <updated>2018-03-26T06:46:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] data) &#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[i] &lt; data[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            tmp = data[i];</span><br><span class="line">            data[i] = data[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; data[j] &gt; tmp; j--)</span><br><span class="line">                data[j + <span class="number">1</span>] = data[j];</span><br><span class="line">            data[j + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n^2)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;排序&quot;&gt;&lt;a href=&quot;#排序&quot; class=&quot;headerlink&quot; title=&quot;排序&quot;&gt;&lt;/a&gt;排序&lt;/h2&gt;&lt;h3 id=&quot;直接插入排序&quot;&gt;&lt;a href=&quot;#直接插入排序&quot; class=&quot;headerlink&quot; title=&quot;直接插入排序&quot;&gt;&lt;/a&gt;直
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>js日期库moment.js</title>
    <link href="http://yoursite.com/2018/02/24/moment-js/"/>
    <id>http://yoursite.com/2018/02/24/moment-js/</id>
    <published>2018-02-24T00:16:42.000Z</published>
    <updated>2018-02-24T00:19:02.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">moment.locale(<span class="string">'zh-cn'</span>);</span><br><span class="line"><span class="keyword">const</span> date = moment(<span class="string">"2018-2-15 19:20:01"</span>, <span class="string">"YYYY-MM-DD HH:mm:ss"</span>).calenda(<span class="literal">null</span>, &#123;</span><br><span class="line">  sameDay: <span class="string">'HH:mm'</span>,</span><br><span class="line">  nextDay: <span class="string">'[明天] HH:mm'</span>,</span><br><span class="line">  nextWeek: <span class="string">'dddd'</span>,</span><br><span class="line">  lastDay: <span class="string">'[昨天] HH:mm'</span>,</span><br><span class="line">  lastWeek: <span class="string">'上周dd HH:mm'</span>,</span><br><span class="line">  sameElse: <span class="string">"YYYY年MM月DD日"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React Native Debugger</title>
    <link href="http://yoursite.com/2018/02/02/react-native-debugger/"/>
    <id>http://yoursite.com/2018/02/02/react-native-debugger/</id>
    <published>2018-02-02T00:53:41.000Z</published>
    <updated>2018-02-02T01:01:21.686Z</updated>
    
    <content type="html"><![CDATA[<p>RN集成了redux之后，测试工具必不可少。使用React Native Debugger可以完美解决该问题。</p><h2 id="安装（for-macOs）"><a href="#安装（for-macOs）" class="headerlink" title="安装（for macOs）"></a>安装（for macOs）</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update &amp;&amp; brew cask install react-native-debugger</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open <span class="string">"rndebugger://set-debugger-loc?host=localhost&amp;port=8081"</span></span><br></pre></td></tr></table></figure><p><strong>Then: </strong><br>在模拟器或真机上打开”Debug Js Remotely”选项</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RN集成了redux之后，测试工具必不可少。使用React Native Debugger可以完美解决该问题。&lt;/p&gt;
&lt;h2 id=&quot;安装（for-macOs）&quot;&gt;&lt;a href=&quot;#安装（for-macOs）&quot; class=&quot;headerlink&quot; title=&quot;安装（
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES7 新语法</title>
    <link href="http://yoursite.com/2018/01/31/es7/"/>
    <id>http://yoursite.com/2018/01/31/es7/</id>
    <published>2018-01-31T05:18:20.000Z</published>
    <updated>2018-01-31T05:59:06.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="Object-definePropert"><a href="#Object-definePropert" class="headerlink" title="Object.definePropert"></a>Object.definePropert</h3><p>在了解装饰器之前，先要熟悉Object.defineProperty，该方法可以用来定义对象中Porp的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.definePropery(object, prop, descriptor)</span><br></pre></td></tr></table></figure></p><p>该方法接受三个参数：</p><ul><li>object 对象名；</li><li>prop 属性名；</li><li>descriptor 属性描述符。</li></ul><p>Example:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someOne = &#123; &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(someOne, <span class="string">"name"</span>, &#123;</span><br><span class="line">    value:<span class="string">"coverguo"</span> , <span class="comment">//由于设定了writable属性为false 导致这个量不可以修改</span></span><br><span class="line">    writable: <span class="literal">false</span> </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(someOne.name); <span class="comment">// 输出 coverguo</span></span><br><span class="line">someOne.name = <span class="string">"linkzhu"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(someOne.name); <span class="comment">// 输出coverguo</span></span><br></pre></td></tr></table></figure></p><p>descriptor参数可以取以下值：</p><ul><li>value:属性的值</li><li>writable:如果为false，属性的值就不能被重写,只能为只读了</li><li>configurable:总开关，一旦为false，就不能再设置他的（value，writable，configurable）</li><li>enumerable:是否能在for…in循环中遍历出来或在Object.keys中列举出来。</li><li>get: 自定义取值时触发</li><li>set: 自定义在赋值时促发的函数</li></ul><h3 id="decorator语法"><a href="#decorator语法" class="headerlink" title="decorator语法"></a>decorator语法</h3><p>decorator接受的参数与Object.defineProperty一致.<br>Example: 定义一个只读的装饰器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">  descriptor.writable = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用方式:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  @readonly</span><br><span class="line">  bark () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'wang!wang!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog()</span><br><span class="line">dog.bark = <span class="string">'bark!bark!'</span></span><br><span class="line"><span class="comment">// Cannot assign to read only property 'bark' of [object Object]</span></span><br></pre></td></tr></table></figure></p><h3 id="作用在类上的decorator"><a href="#作用在类上的decorator" class="headerlink" title="作用在类上的decorator"></a>作用在类上的decorator</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 `target` 是类本身</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doge</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.isDoge = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@doge</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Dog.isDoge)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>decorator 也可以是 factory function<br>如果我们想对不同的目标对象应用同一个 decorator，但同时又需要有一些差别，怎么办？很简单：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doge</span> (<span class="params">isDoge</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    target.isDoge = isDoge</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@doge(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Dog.isDoge)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">@doge(<span class="literal">false</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Human.isDoge)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>如果想对一个类或者一个方法附加新的机制，又不想破坏其原本的结构（利于复用），该新语法值得一用。<br>react 高阶组件：</p><ul><li>react-redux connect；</li><li>redux-form。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h2&gt;&lt;h3 id=&quot;Object-definePropert&quot;&gt;&lt;a href=&quot;#Object-definePropert&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Harray Potter —— 1</title>
    <link href="http://yoursite.com/2018/01/20/HarryPotter-md/"/>
    <id>http://yoursite.com/2018/01/20/HarryPotter-md/</id>
    <published>2018-01-20T07:04:44.000Z</published>
    <updated>2018-02-10T04:03:35.237Z</updated>
    
    <content type="html"><![CDATA[<p><strong>triumph</strong><br>英  [‘traɪʌmf]   美  [ˈtraɪəmf]<br>n. 胜利，凯旋；欢欣<br>vi. 获得胜利，成功</p><p><strong>scale</strong><br>英  [skeɪl]   美  [skel]<br>n. 规模；比例；鳞；刻度；天平；数值范围<br>vi. 衡量；攀登；剥落；生水垢<br>vt. 测量；攀登；刮鳞；依比例决定</p><p><strong>supernatural</strong><br>英  [,suːpə’nætʃ(ə)r(ə)l; ,sjuː-]   美  [,supɚ’nætʃrəl]<br>adj. 超自然的；神奇的，不可思议的<br>n. 超自然现象；不可思议的事</p><p><strong>even while the supernatural is popping out all over</strong><br>即使在超自然的情况下也是如此</p><p><strong>sly</strong><br>英  [slaɪ]   美  [slaɪ]<br>adj. 狡猾的；淘气的；诡密的</p><p><strong>humor</strong><br>英  [ˈhjuːmə]   美  [‘hjʊmɚ]<br>n. 幽默，诙谐；心情<br>vt. 迎合，迁就；顺应</p><p><strong>impressively</strong><br>[im’presivli]<br>adv. 令人难忘地；感人地</p><p><strong>seamlessly</strong><br>英  [‘si:mlisli]   美  [‘si:mlisli]<br>adv. 无缝地</p><p><strong>narrative</strong><br>英  [‘nærətɪv]   美  [‘nærətɪv]<br>n. 叙述；故事；讲述<br>adj. 叙事的，叙述的；叙事体的</p><p><strong>sorcerer</strong><br>英  [‘sɔːs(ə)rə]   美  [‘sɔrsərɚ]<br>n. 魔术师；男巫士</p><p><strong>wizardry</strong><br>英  [‘wɪzədrɪ]   美  [‘wɪzɚdri]<br>n. 巫术，魔法</p><p><strong>soar</strong><br>英  [sɔː]   美  [sɔr]<br>vi. 高飞；高耸；往上飞舞<br>n. 高飞；高涨<br>n. (Soar)人名；(英、葡)索尔</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;triumph&lt;/strong&gt;&lt;br&gt;英  [‘traɪʌmf]   美  [ˈtraɪəmf]&lt;br&gt;n. 胜利，凯旋；欢欣&lt;br&gt;vi. 获得胜利，成功&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scale&lt;/strong&gt;&lt;br&gt;英  [skeɪl]   美  
      
    
    </summary>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Android学习笔记——用户界面</title>
    <link href="http://yoursite.com/2018/01/19/android-interface/"/>
    <id>http://yoursite.com/2018/01/19/android-interface/</id>
    <published>2018-01-19T06:44:12.000Z</published>
    <updated>2018-02-20T07:54:30.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h2><p><strong>app &gt; java &gt; com.example.myfirstapp &gt; MainActivity.java</strong><br>这是主 Activity。当构建和运行应用时，系统会启动此 Activity 的实例并加载其布局。</p><p><strong>app &gt; res &gt; layout &gt; activity_main.xml</strong><br>布局文件，类似jsx。</p><p><strong>app &gt; manifests &gt; AndroidManifest.xml</strong><br>manifest 文件描述应用的基本特性并定义其每个组件。</p><p><strong>Gradle Scripts &gt; build.gradle</strong><br>会看到具有此名称的两个文件：一个用于项目，一个用于“应用”模块。每个模块均有自己的 build.gradle 文件，但此项目当前仅有一个模块。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="编写XML"><a href="#编写XML" class="headerlink" title="编写XML"></a>编写XML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"Hello, I am a TextView"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Hello, I am a Button"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:id=&quot;@+id/my_button&quot;</span><br></pre></td></tr></table></figure><p>类似于html中的id，可以通过id来捕获该对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Button myButton = (Button) findViewById(R.id.my_button);</span><br></pre></td></tr></table></figure><p>加号的意思是会在R.java文件也就是安卓的资源文件中生成响应的id号。如果id已存在，则去掉加号使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:id=&quot;@id/my_button&quot;</span><br></pre></td></tr></table></figure><h4 id="布局参数"><a href="#布局参数" class="headerlink" title="布局参数"></a>布局参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">android:layout_height=&quot;match_parent&quot;</span><br></pre></td></tr></table></figure><ul><li><strong>wrap_content</strong> 指示您的视图将其大小调整为内容所需的尺寸。</li><li><strong>match_parent</strong> 指示您的视图尽可能采用其父视图组所允许的最大尺寸。</li></ul><h2 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h2><p>线性布局会根据权重将屏幕分割成水平或者竖直的视图块。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"@string/to"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"@string/subject"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"top"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"@string/message"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/send"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>android:orientation</strong>: 指定布局方向, horizontal(水平)或vertical(竖直)</li><li><strong>android:layout_weight</strong>: 权重属性,如不设置则为0。权重为0的时候，组件只占用内容所需区域。</li></ul><h2 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h2><p>相对布局和web开发中的相对位置类似，可以将组件相对于父母或者兄弟元素进行相应的移动, 如果不设置相应的参数，那么组件将默认出现在父母组件的左上角。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"16dp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"Reminder"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Spinner</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/dates"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toLeftOf</span>=<span class="string">"@+id/times"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Spinner</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@id/times"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"96dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"96dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@id/times"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Done"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>android:layout_alignParentTop</strong>: true / false</li><li><strong>android:layout_centerVertical</strong>: true / false</li><li><strong>android:layout_below</strong>: id </li><li><strong>android:layout_toRightOf</strong>: id</li></ul><h2 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h2><p>类似于html中的表格，不常用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TableLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"one"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_span</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"two"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"three"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"one"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"two"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"two"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"three"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>android:collapseColumns</strong>:设置需要被隐藏的列的序号</li><li><strong>android:shrinkColumns</strong>:设置允许被收缩的列的列序号</li><li><strong>android:stretchColumns</strong>:设置运行被拉伸的列的列序号</li></ul><p>以上这三个属性的列号都是从0开始算的,比如shrinkColunmns = “2”,对应的是第三列！<br>可以设置多个,用逗号隔开比如”0,2”,如果是所有列都生效,则用”*”号即可<br>除了这三个常用属性,还有两个属性,分别就是跳格子以及合并单元格,这和HTML中的Table类似:</p><ul><li><strong>android:layout_column=”2”</strong>:表示的就是跳过第二个,直接显示到第三个格子处,从1开始算的!</li><li><strong>android:layout_span=”4”</strong>:表示合并4个单元格,也就说这个组件占4个单元格</li></ul><h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><p>与表格布局类似。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">GridLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:rowCount</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:columnCount</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_columnSpan</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;重要文件&quot;&gt;&lt;a href=&quot;#重要文件&quot; class=&quot;headerlink&quot; title=&quot;重要文件&quot;&gt;&lt;/a&gt;重要文件&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;app &amp;gt; java &amp;gt; com.example.myfirstapp &amp;gt; MainAct
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>react-native-element</title>
    <link href="http://yoursite.com/2018/01/19/react-native-element/"/>
    <id>http://yoursite.com/2018/01/19/react-native-element/</id>
    <published>2018-01-19T05:53:44.000Z</published>
    <updated>2018-01-23T07:41:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单好用的 React Native 组件库。</p><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; List, ListItem &#125; <span class="keyword">from</span> <span class="string">'react-native-elements'</span>;</span><br><span class="line">list = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'aaa'</span>, <span class="attr">value</span>: <span class="string">'123'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'bbb'</span>, <span class="attr">value</span>: <span class="string">'346'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ScrollView style=&#123;CommonStyles.container&#125;&gt;</span><br><span class="line">      &lt;List containerStyle=&#123;CommonStyles.detailList&#125;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">this</span>.list.map(<span class="function">(<span class="params">l, i</span>) =&gt;</span> (</span><br><span class="line">            &lt;ListItem</span><br><span class="line">              key=&#123;i&#125;</span><br><span class="line">              title=&#123;l.name&#125;</span><br><span class="line">              rightTitle=&#123;l.value&#125;</span><br><span class="line">              hideChevron</span><br><span class="line">              containerStyle=&#123;CommonStyles.detailListItemContainer&#125;</span><br><span class="line">              wrapperStyle=&#123;CommonStyles.detailListItemWrapper&#125;</span><br><span class="line">              titleStyle=&#123;[CommonStyles.label, &#123; <span class="attr">marginLeft</span>: <span class="number">0</span> &#125;]&#125;</span><br><span class="line">              rightTitleStyle=&#123;CommonStyles.text&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          ))</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/List&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ScrollView&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单好用的 React Native 组件库。&lt;/p&gt;
&lt;h2 id=&quot;Lists&quot;&gt;&lt;a href=&quot;#Lists&quot; class=&quot;headerlink&quot; title=&quot;Lists&quot;&gt;&lt;/a&gt;Lists&lt;/h2&gt;&lt;h3 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; clas
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 列表组件</title>
    <link href="http://yoursite.com/2018/01/14/rn-listView/"/>
    <id>http://yoursite.com/2018/01/14/rn-listView/</id>
    <published>2018-01-14T08:30:17.000Z</published>
    <updated>2018-01-16T01:39:44.076Z</updated>
    
    <content type="html"><![CDATA[<p>React Native 提供了三种列表组件，分别是：ListView，FlatList 和 SectionList，由于 ListView 已经被弃用，便不再进行详细的说明，本章节主要介绍 FlatList 和 SectionList 的常用属性。</p><h2 id="FaltList"><a href="#FaltList" class="headerlink" title="FaltList"></a>FaltList</h2><p>高性能的简单列表组件，具有以下便利的特性：</p><ul><li>完全跨平台；</li><li>支持水平布局模式；</li><li>行组件显示或隐藏时可配置回调事件；</li><li>支持单独的头部组件；</li><li>支持单独的尾部组件；</li><li>支持自定义行间分隔线；</li><li>支持下拉刷新；</li><li>支持上拉加载；</li><li>支持跳转到指定行（ScrollToIndex）。</li></ul><h3 id="官方例子解析（解决惰性渲染问题）"><a href="#官方例子解析（解决惰性渲染问题）" class="headerlink" title="官方例子解析（解决惰性渲染问题）"></a>官方例子解析（解决惰性渲染问题）</h3><p>由于 FlatList 的惰性渲染，当除了 data 属性以外的数据改变时，可能无法导致界面的重新渲染，因此要通过 extraData 属性来解决该问题,下面上代码.</p><p>/components/MyList.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text, TouchableOpacity &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListItem</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  _onPress = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props._onPressItem(<span class="keyword">this</span>.props.id);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> textColor = <span class="keyword">this</span>.props.selected ? <span class="string">'red'</span> : <span class="string">'black'</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>._onPress&#125;&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Text style=&#123;&#123; <span class="attr">color</span>: textColor &#125;&#125;&gt;&#123;<span class="keyword">this</span>.props.title&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>View&gt;</span><br><span class="line">      &lt;<span class="regexp">/TouchableOpacity&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const MyList = &#123;</span></span><br><span class="line"><span class="regexp">  MyListItem</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">export default MyList;</span></span><br></pre></td></tr></table></figure><p>/containers/Devices.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FlatList &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> MyList <span class="keyword">from</span> <span class="string">'../components/MyListItem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'台式机'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'笔记本'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'苹果手机'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Devices</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      selected: <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定是用id代替key</span></span><br><span class="line">  _keyExtrator = <span class="function"><span class="params">item</span> =&gt;</span> item.id;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// onPress事件触发，构造列表项可以被选中的效果</span></span><br><span class="line">  _onPressItem = <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> selected = <span class="keyword">new</span> <span class="built_in">Map</span>(prevState.selected);</span><br><span class="line">      selected.set(id, !selected.get(id));</span><br><span class="line">      <span class="built_in">console</span>.log(selected);</span><br><span class="line">      <span class="keyword">return</span> &#123; selected &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 列表项渲染</span></span><br><span class="line">  _renderItem = <span class="function">(<span class="params">&#123; item &#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;MyList.MyListItem</span><br><span class="line">      id=&#123;item.id&#125;</span><br><span class="line">      _onPressItem=&#123;<span class="keyword">this</span>._onPressItem&#125;</span><br><span class="line">      selected=&#123;!!<span class="keyword">this</span>.state.selected.get(item.id)&#125;</span><br><span class="line">      title=&#123;item.title&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;FlatList</span><br><span class="line">        data=&#123;data&#125;</span><br><span class="line">        extraData=&#123;<span class="keyword">this</span>.state&#125;</span><br><span class="line">        keyExtractor=&#123;<span class="keyword">this</span>._keyExtrator&#125;</span><br><span class="line">        renderItem=&#123;<span class="keyword">this</span>._renderItem&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Devices;</span><br></pre></td></tr></table></figure><p>在这个例子中，构造了“列表项被点击选中时，其内容变红色，再次点击，取消中选中时，其内容变回黑色”这样一个简单的效果,通过父组中 state.selected 来记录相应的列表项是否被选中，同时将改值赋予 FlatList 的 extraData 属性，使其可以被 FlatList 识别。同还用到了其他属性：</p><ul><li>data (指定填充列表的数据，通常为数组)；</li><li>keyExtractor (react 规定所有数据为数组类型的组件，数组的每一项必须指定一个 key 属性以区别于其他数组项，类似与数据库中的主键，通过该属性，可以自己定制主键属性)。</li></ul><p>以此例子为基础，我们来展开对其它属性的学习。</p><h3 id="UI-属性"><a href="#UI-属性" class="headerlink" title="UI 属性"></a>UI 属性</h3><ul><li>ItemSeparatorComponent?: ?ReactClass<any> （行与行之间的分隔线组件。不会出现在第一行之前和最后一行之后。）</any></li><li>ListEmptyComponent?: ?ReactClass<any> | React.Element<any>(列表为空时渲染该组件。可以是 React Component, 也可以是一个 render 函数， 或者渲染好的 element。)</any></any></li><li>ListFooterComponent?: ?ReactClass<any> (尾部组件)</any></li><li>ListHeaderComponent?: ?ReactClass<any> (头部组件)</any></li></ul><p>/components/MyList.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const ItemSeparatorComponent = () =&gt; (</span><br><span class="line">  &lt;View style=&#123;CommonStyles.separatorLine&#125; /&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const ListEmptyComponent = () =&gt; (</span><br><span class="line">  &lt;View style=&#123;&#123; flex: 1, alignItems: &apos;center&apos;, marginTop: 20 &#125;&#125;&gt;</span><br><span class="line">    &lt;Text style=&#123;CommonStyles.text&#125;&gt;当前没有任何数据!&lt;/Text&gt;</span><br><span class="line">  &lt;/View&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const ListHeaderComponent = (&#123; length = 0 &#125;) =&gt; (</span><br><span class="line">  &lt;View style=&#123;CommonStyles.listHeaderComponent&#125;&gt;</span><br><span class="line">    &lt;Text style=&#123;CommonStyles.smallText&#125;&gt;当前总共&#123;length&#125;条数据&lt;/Text&gt;</span><br><span class="line">  &lt;/View&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const ListFooterComponent = () =&gt; (</span><br><span class="line">  &lt;View style=&#123;CommonStyles.listHeaderComponent&#125;&gt;</span><br><span class="line">    &lt;Text style=&#123;CommonStyles.smallText&#125;&gt;已经到最下面了&lt;/Text&gt;</span><br><span class="line">  &lt;/View&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const MyList = &#123;</span><br><span class="line">  MyListItem,</span><br><span class="line">  ItemSeparatorComponent,</span><br><span class="line">  ListEmptyComponent,</span><br><span class="line">  ListHeaderComponent,</span><br><span class="line">  ListFooterComponent</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>/containers/Devices.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;FlatList</span><br><span class="line">      data=&#123;data&#125;</span><br><span class="line">      extraData=&#123;<span class="keyword">this</span>.state&#125;</span><br><span class="line">      keyExtractor=&#123;<span class="keyword">this</span>._keyExtrator&#125;</span><br><span class="line">      renderItem=&#123;<span class="keyword">this</span>._renderItem&#125;</span><br><span class="line">      ItemSeparatorComponent=&#123;MyList.ItemSeparatorComponent&#125;</span><br><span class="line">      ListEmptyComponent=&#123;MyList.ListEmptyComponent&#125;</span><br><span class="line">      ListHeaderComponent=&#123;&lt;MyList.ListHeaderComponent lenght=&#123;data.length&#125; /&gt;&#125;</span><br><span class="line">      ListFooterComponent=&#123;MyList.ListFooterComponent&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><ul><li><strong>onRefresh</strong>?: ?() =&gt; void (如果设置了此选项，则会在列表头部添加一个标准的RefreshControl控件，以便实现“下拉刷新”的功能。同时你需要正确设置refreshing属性。)</li><li><strong>refreshing</strong>?: ?boolean (在等待加载新数据时将此属性设为true，列表就会显示出一个正在加载的符号。)</li></ul><p>如果不喜欢默认的刷新器的颜色，可通过指定属性refreshControl来定制舒心器</p><p>/components/MyList.js<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyRefreshControl = <span class="function">(<span class="params">&#123; refreshing = <span class="literal">false</span>, _onRefresh &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;RefreshControl</span><br><span class="line">    refreshing=&#123;refreshing&#125;</span><br><span class="line">    onRefresh=&#123;_onRefresh&#125;</span><br><span class="line">    title=<span class="string">"正在刷新界面"</span></span><br><span class="line">    tintColor=&#123;AppColor.THEME&#125;</span><br><span class="line">    titleColor=&#123;AppColor.FONT&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>/containers/Devices.js<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下拉刷新事件</span></span><br><span class="line">_onRefresh = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'refresh'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;FlatList</span><br><span class="line">  data=&#123;data&#125;</span><br><span class="line">  extraData=&#123;<span class="keyword">this</span>.state&#125;</span><br><span class="line">  keyExtractor=&#123;<span class="keyword">this</span>._keyExtrator&#125;</span><br><span class="line">  renderItem=&#123;<span class="keyword">this</span>._renderItem&#125;</span><br><span class="line">  ItemSeparatorComponent=&#123;MyList.ItemSeparatorComponent&#125;</span><br><span class="line">  ListEmptyComponent=&#123;MyList.ListEmptyComponent&#125;</span><br><span class="line">  ListHeaderComponent=&#123;</span><br><span class="line">    &lt;MyList.ListHeaderComponent lenght=&#123;data.length&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  ListFooterComponent=&#123;MyList.ListFooterComponent&#125;</span><br><span class="line">  refreshControl=&#123;</span><br><span class="line">    &lt;MyList.MyRefreshControl</span><br><span class="line">      refreshing=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      _onRefresh=&#123;<span class="keyword">this</span>._onRefresh&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><h3 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h3><ul><li><p><strong>onEndReached</strong>?: ?(info: {distanceFromEnd: number}) =&gt; void (当列表被滚动到距离内容最底部不足onEndReachedThreshold的距离时调用。)</p></li><li><p><strong>onEndReachedThreshold</strong>?: ?number (决定当距离内容最底部还有多远时触发onEndReached回调。注意此参数是一个比值而非像素单位。比如，0.5表示距离内容最底部的距离为当前列表可见长度的一半时触发。)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React Native 提供了三种列表组件，分别是：ListView，FlatList 和 SectionList，由于 ListView 已经被弃用，便不再进行详细的说明，本章节主要介绍 FlatList 和 SectionList 的常用属性。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 刷题</title>
    <link href="http://yoursite.com/2018/01/11/leet-code/"/>
    <id>http://yoursite.com/2018/01/11/leet-code/</id>
    <published>2018-01-11T00:15:41.000Z</published>
    <updated>2018-01-17T02:02:22.397Z</updated>
    
    <content type="html"><![CDATA[<p>题目均源自 <a href="https://leetcode.com/" target="_blank" rel="noopener">LeetCode</a> (ง •̀_•́)ง</p><h2 id="Easy"><a href="#Easy" class="headerlink" title="Easy"></a>Easy</h2><h3 id="Find-Anagram-Mappings"><a href="#Find-Anagram-Mappings" class="headerlink" title="Find Anagram Mappings"></a>Find Anagram Mappings</h3><p>Given two lists Aand B, and B is an anagram of A. B is an anagram of A means B is made by randomizing the order of the elements in A.</p><p>We want to find an index mapping P, from A to B. A mapping P[i] = j means the ith element in A appears in B at index j.</p><p>These lists A and B may contain duplicates. If there are multiple answers, output any of them.</p><p>For example, given</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A = [<span class="number">12</span>, <span class="number">28</span>, <span class="number">46</span>, <span class="number">32</span>, <span class="number">50</span>]</span><br><span class="line">B = [<span class="number">50</span>, <span class="number">12</span>, <span class="number">32</span>, <span class="number">46</span>, <span class="number">28</span>]</span><br></pre></td></tr></table></figure><p>We should return<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p>as P[0] = 1 because the 0th element of A appears at B[1], and P[1] = 4 because the 1st element of A appears at B[4], and so on.</p><p><strong>Solution:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anagramMappings = <span class="function"><span class="keyword">function</span>(<span class="params">A, B</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.map(<span class="function"><span class="params">item</span> =&gt;</span> B.indexOf(item));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Hamming-Distance"><a href="#Hamming-Distance" class="headerlink" title="Hamming Distance"></a>Hamming Distance</h3><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers x and y, calculate the Hamming distance.</p><p>Note:<br>0 ≤ x, y &lt; 231.</p><p>Example:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: x = <span class="number">1</span>, y = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">Output: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line"><span class="number">1</span>   (<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span>)</span><br><span class="line"><span class="number">4</span>   (<span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span>)</span><br><span class="line">       ↑   ↑</span><br></pre></td></tr></table></figure></p><p>The above arrows point to positions where the corresponding bits are different.</p><p><strong>Solution:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hammingDistance = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x ^ y).toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>, <span class="string">''</span>).length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如何处理负数呢？(﹁”﹁)<br>javascript中没有无符号位的数，因此在处理负数时，通过&gt;&gt;&gt;操作符先将其转换为无符号的等价形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((x ^ y) &gt;&gt;&gt; <span class="number">0</span>).toString(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="Merge-Two-Binary-Trees"><a href="#Merge-Two-Binary-Trees" class="headerlink" title="Merge Two Binary Trees"></a>Merge Two Binary Trees</h3><p>Given two binary trees and imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not.</p><p>You need to merge them into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of new tree.</p><p>Example 1:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">Tree <span class="number">1</span>                     Tree <span class="number">2</span>                  </span><br><span class="line">          <span class="number">1</span>                         <span class="number">2</span>                             </span><br><span class="line">         / \                       / \                            </span><br><span class="line">        <span class="number">3</span>   <span class="number">2</span>                     <span class="number">1</span>   <span class="number">3</span>                        </span><br><span class="line">       /                           \   \                      </span><br><span class="line">      <span class="number">5</span>                             <span class="number">4</span>   <span class="number">7</span>                  </span><br><span class="line">Output: </span><br><span class="line">Merged tree:</span><br><span class="line">     <span class="number">3</span></span><br><span class="line">    / \</span><br><span class="line">   <span class="number">4</span>   <span class="number">5</span></span><br><span class="line">  / \   \ </span><br><span class="line"> <span class="number">5</span>   <span class="number">4</span>   <span class="number">7</span></span><br></pre></td></tr></table></figure></p><p>Note: The merging process must start from the root nodes of both trees.</p><p><strong>Solution:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; t1</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; t2</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> mergeTrees = <span class="function"><span class="keyword">function</span>(<span class="params">t1, t2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t1 &amp;&amp; !t2) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> root = <span class="keyword">new</span> TreeNode(((t1 || <span class="number">0</span>).val || <span class="number">0</span>) + ((t2 || <span class="number">0</span>).val || <span class="number">0</span>));</span><br><span class="line">    root.left = mergeTrees(t1 &amp;&amp; t1.left, t2 &amp;&amp; t2.left);</span><br><span class="line">    root.right = mergeTrees(t1 &amp;&amp; t1.right, t2 &amp;&amp; t2.right);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Reverse-Words-in-a-String-III"><a href="#Reverse-Words-in-a-String-III" class="headerlink" title="Reverse Words in a String III"></a>Reverse Words in a String III</h3><p>Given a string, you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p><p>Example 1:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"Let's take LeetCode contest"</span></span><br><span class="line">Output: <span class="string">"s'teL ekat edoCteeL tsetnoc"</span></span><br></pre></td></tr></table></figure></p><p>Note: In the string, each word is separated by single space and there will not be any extra space in the string.</p><p><strong>Solution:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s</span><br><span class="line">    .split(<span class="string">' '</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">item</span> =&gt;</span></span><br><span class="line">      item</span><br><span class="line">        .split(<span class="string">''</span>)</span><br><span class="line">        .reverse()</span><br><span class="line">        .join(<span class="string">''</span>)</span><br><span class="line">    )</span><br><span class="line">    .join(<span class="string">' '</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Reshape-the-Matrix"><a href="#Reshape-the-Matrix" class="headerlink" title="Reshape the Matrix"></a>Reshape the Matrix</h3><p>In MATLAB, there is a very useful function called ‘reshape’, which can reshape a matrix into a new one with different size but keep its original data.</p><p>You’re given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.</p><p>The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.</p><p>If the ‘reshape’ operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.</p><p><strong>Example 1</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">nums = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"> [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">r = <span class="number">1</span>, c = <span class="number">4</span></span><br><span class="line">Output: </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">Explanation:</span><br><span class="line">The row-traversing <span class="keyword">of</span> nums is [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]. The <span class="keyword">new</span> reshaped matrix is a <span class="number">1</span> * <span class="number">4</span> matrix, fill it row by row by using the previous list.</span><br></pre></td></tr></table></figure></p><p><strong>Example 2</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">nums = </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"> [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">r = <span class="number">2</span>, c = <span class="number">4</span></span><br><span class="line">Output: </span><br><span class="line">[[<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line"> [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">Explanation:</span><br><span class="line">There is no way to reshape a <span class="number">2</span> * <span class="number">2</span> matrix to a <span class="number">2</span> * <span class="number">4</span> matrix. So output the original matrix.</span><br></pre></td></tr></table></figure></p><p><strong>Solution:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; r</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; c</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> matrixReshape = <span class="function"><span class="keyword">function</span>(<span class="params">nums, r, c</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> length = nums.length * nums[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">if</span> ((r * c != length) || (r === nums.length &amp;&amp; c === nums[<span class="number">0</span>].length)) <span class="keyword">return</span> nums; </span><br><span class="line">    <span class="comment">// 先降维</span></span><br><span class="line">    <span class="keyword">const</span> newNums = nums.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total.concat(num);</span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="keyword">const</span> matrix = [];</span><br><span class="line">    <span class="built_in">console</span>.log(nums);</span><br><span class="line">    <span class="comment">// 再构造</span></span><br><span class="line">    newNums.reduce(<span class="function">(<span class="params">total, num, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx === c - <span class="number">1</span> || (idx + <span class="number">1</span>) % c === <span class="number">0</span>) &#123;</span><br><span class="line">            total.push(num);</span><br><span class="line">            matrix.push(total);</span><br><span class="line">            total = [];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            total.push(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="keyword">return</span> matrix;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Island-Perimeter"><a href="#Island-Perimeter" class="headerlink" title="Island Perimeter"></a>Island Perimeter</h3><p>You are given a map in form of a two-dimensional integer grid where 1 represents land and 0 represents water. Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). The island doesn’t have “lakes” (water inside that isn’t connected to the water around the island). One cell is a square with side length 1. The grid is rectangular, width and height don’t exceed 100. Determine the perimeter of the island.</p><p><strong>Example:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line"> [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line">Answer: <span class="number">16</span></span><br></pre></td></tr></table></figure></p><p>Explanation: The perimeter is the 16 yellow stripes in the image below:<br><img src="/images/island.png" alt="island"></p><p><strong>Solution:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; grid</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> islandPerimeter = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line">    grid.forEach(<span class="function">(<span class="params">cell, r</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> c = <span class="number">0</span>; c &lt; cell.length; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cell[c] === <span class="number">1</span> ) &#123;</span><br><span class="line">                total += <span class="number">4</span>;</span><br><span class="line">                <span class="comment">// 除却第一行，顶部有重合边</span></span><br><span class="line">                <span class="keyword">if</span> (r &gt; <span class="number">0</span> &amp;&amp; grid[r - <span class="number">1</span>][c] === <span class="number">1</span>) total -= <span class="number">2</span>;</span><br><span class="line">                <span class="comment">// 除却第一列，左边有重合边</span></span><br><span class="line">                <span class="keyword">if</span> (c &gt; <span class="number">0</span> &amp;&amp; grid[r][c - <span class="number">1</span>] === <span class="number">1</span>) total -= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Find-All-Numbers-Disappeared-in-an-Array"><a href="#Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Find All Numbers Disappeared in an Array"></a>Find All Numbers Disappeared in an Array</h3><p>Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of [1, n] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.</p><p><strong>Example:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure></p><p><strong>Solution:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> val = <span class="built_in">Math</span>.abs(item) <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[val] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            nums[val] = - nums[val];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    nums.forEach(<span class="function">(<span class="params">item, idx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(item &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result.push(idx + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Move-Zeroes"><a href="#Move-Zeroes" class="headerlink" title="Move Zeroes"></a>Move Zeroes</h3><p>Given an array nums, write a function to move all 0’s to the end of it while maintaining the relative order of the non-zero elements.</p><p>For example, given nums = [0, 1, 0, 3, 12], after calling your function, nums should be [1, 3, 12, 0, 0].</p><p><strong>Note</strong>:</p><ol><li>You must do this in-place without making a copy of the array.</li><li>Minimize the total number of operations.</li></ol><p><strong>Solution:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> insertPos = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 非零值尽可能向前移</span></span><br><span class="line">    <span class="keyword">for</span>(num <span class="keyword">of</span> nums)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num != <span class="number">0</span>) nums[insertPos ++] = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(insertPos &lt; nums.length) &#123;</span><br><span class="line">        nums[insertPos ++] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Two-Sum-IV-Input-is-a-BST"><a href="#Two-Sum-IV-Input-is-a-BST" class="headerlink" title="Two Sum IV - Input is a BST"></a>Two Sum IV - Input is a BST</h3><p>Given a Binary Search Tree and a target number, return true if there exist two elements in the BST such that their sum is equal to the given target.</p><p><strong>Example 1:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">    <span class="number">5</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">3</span>   <span class="number">6</span></span><br><span class="line"> / \   \</span><br><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">7</span></span><br><span class="line"></span><br><span class="line">Target = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">    <span class="number">5</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">3</span>   <span class="number">6</span></span><br><span class="line"> / \   \</span><br><span class="line"><span class="number">2</span>   <span class="number">4</span>   <span class="number">7</span></span><br><span class="line"></span><br><span class="line">Target = <span class="number">28</span></span><br><span class="line"></span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure></p><p><strong>Solution:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findTarget = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> values = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">    <span class="keyword">let</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inorder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 中序遍历二叉树</span></span><br><span class="line">        inorder(node.left);</span><br><span class="line">        <span class="keyword">if</span>(values.has(k - node.val)) &#123;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        values.add(node.val);</span><br><span class="line">        inorder(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root);</span><br><span class="line">    <span class="keyword">return</span> found;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="Convert-BST-to-Greater-Tree"><a href="#Convert-BST-to-Greater-Tree" class="headerlink" title="Convert BST to Greater Tree"></a>Convert BST to Greater Tree</h3><p><strong>Solution:</strong><br>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.<br><strong>Example:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: The root <span class="keyword">of</span> a Binary Search Tree like <span class="keyword">this</span>:</span><br><span class="line">              <span class="number">5</span></span><br><span class="line">            /   \</span><br><span class="line">           <span class="number">2</span>     <span class="number">13</span></span><br><span class="line"></span><br><span class="line">Output: The root <span class="keyword">of</span> a Greater Tree like <span class="keyword">this</span>:</span><br><span class="line">             <span class="number">18</span></span><br><span class="line">            /   \</span><br><span class="line">          <span class="number">20</span>     <span class="number">13</span></span><br></pre></td></tr></table></figure></p><p><strong>Solution:</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convertBST = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 逆向，中序遍历二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inorder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!node) <span class="keyword">return</span>;</span><br><span class="line">        inorder(node.right);</span><br><span class="line">        node.val += sum;</span><br><span class="line">        sum = node.val;</span><br><span class="line">        inorder(node.left);</span><br><span class="line">    &#125;</span><br><span class="line">    inorder(root);</span><br><span class="line">    <span class="keyword">return</span> root</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目均源自 &lt;a href=&quot;https://leetcode.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LeetCode&lt;/a&gt; (ง •̀_•́)ง&lt;/p&gt;
&lt;h2 id=&quot;Easy&quot;&gt;&lt;a href=&quot;#Easy&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="leetCode" scheme="http://yoursite.com/tags/leetCode/"/>
    
  </entry>
  
  <entry>
    <title>Redux Saga常用API</title>
    <link href="http://yoursite.com/2018/01/10/redux-saga/"/>
    <id>http://yoursite.com/2018/01/10/redux-saga/</id>
    <published>2018-01-10T02:14:07.000Z</published>
    <updated>2018-01-29T02:37:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于redux本身只支持同步数据流，对于异步数据流，需要通过中间件来解决, 学习中间件前，需要掌握ES6的。redux-saga作为一个完善的中间件，包括了监听，阻塞，派送未来的action, 获取当前state等等好用的API。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="监听并且阻塞Action"><a href="#监听并且阻塞Action" class="headerlink" title="监听并且阻塞Action"></a>监听并且阻塞Action</h3><p>对于一个redux异步数据流，通常始与监听到一个指定的Action，然后自动执行接下来的数据流<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = <span class="keyword">yield</span> take(<span class="string">'Request'</span>);</span><br><span class="line"><span class="comment">//接下来可以使用call函数来执行指定的saga</span></span><br></pre></td></tr></table></figure></p><p>take函数可以监听并阻塞一次Action,参数为Action的名称,该函数的返回值为Action的内容</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; takeEvery &#125; <span class="keyword">from</span> <span class="string">`redux-saga/effects`</span></span><br><span class="line"><span class="keyword">yield</span> takeEvery(<span class="string">'Request'</span>, fetchData,  ...args);</span><br><span class="line"><span class="comment">// 以上代码等同于:</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 监听Action</span></span><br><span class="line">  <span class="keyword">const</span> action = <span class="keyword">yield</span> take(patternOrChannel)</span><br><span class="line">  <span class="comment">// 如果不想接下来的数据流被阻塞，可以使用fork，否则用call</span></span><br><span class="line">  <span class="keyword">yield</span> fork(saga, ...args.concat(action))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>takeEvery的用处如同其名称一样，每次该Action被派送时，都会被监听到。第一个参数也是Action的名称，第二个参数为监听到该Action时，需要执行的函数。这里我们间听到“Request”这个Action时，会出发fetchData方法,去获取服务器的数据。</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span> takeLatest(<span class="string">'USER_REQUESTED'</span>, fetchUser)</span><br></pre></td></tr></table></figure><p>有时候用户可能会意外地多次触发了Action（例如提交表单的时候）,这可能造成用户频繁的访问服务器（重复提交表单），为了防止这种无意义的行为，可以使用takeLateast。takeLatest会将传入的saga作为一个task去执行，如果前一个task还没有执行完，又监听到了相同的Action，则会自动取消该task，因此最后执行的saga则是短时间内用户第一次的操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> takeLatest = <span class="function">(<span class="params">patternOrChannel, saga, ...args</span>) =&gt;</span> fork(<span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> lastTask</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> action = <span class="keyword">yield</span> take(patternOrChannel)</span><br><span class="line">    <span class="keyword">if</span> (lastTask) &#123;</span><br><span class="line">      <span class="keyword">yield</span> cancel(lastTask) <span class="comment">// cancel is no-op if the task has already terminated</span></span><br><span class="line">    &#125;</span><br><span class="line">    lastTask = <span class="keyword">yield</span> fork(saga, ...args.concat(action))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然在一般情况下，我们可以直接使用take更加简单粗暴的阻塞数据流，同样可以防止后面的表单提交数据流的执行。</p><h3 id="rece"><a href="#rece" class="headerlink" title="rece"></a>rece</h3><h3 id="put"><a href="#put" class="headerlink" title="put"></a>put</h3><h3 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h3><h3 id="cancel"><a href="#cancel" class="headerlink" title="cancel"></a>cancel</h3><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于redux本身只支持同步数据流，对于异步数据流，需要通过中间件来解决, 学习中间件前，需要掌握ES6的。redux-saga作为一个完善
      
    
    </summary>
    
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>使用Redux Form快速构建表单的redux数据流</title>
    <link href="http://yoursite.com/2018/01/09/redux-form/"/>
    <id>http://yoursite.com/2018/01/09/redux-form/</id>
    <published>2018-01-09T00:06:21.000Z</published>
    <updated>2018-01-11T08:55:59.351Z</updated>
    
    <content type="html"><![CDATA[<p>无论再那种应用中，表单都是一种常见的提交数据的方式，在 reac 或 react native 中也不例外。但是，当通过 redux 来管理应用的数据之后，该如何来构建表单的数据流呢？或者更简单的说，对于使用 redux 处理表单的数据，需要哪些 Action 呢？经过简单的思考，可以想到这些 Action:</p><ul><li>表单组件挂载时，初始化（或者说创建）表单数据；</li><li>用户更改表单数据时，修改相应的 state 的值；</li><li>表单数据同步验证；<br>…..</li><li>离开表单界面时，销毁数据</li></ul><p>Rdux Form 的作用正是通过 React 高阶组件的方式，自动创建这些数据流。由于高阶组件的本质是纯函数，不会受到原组件的结构影响，所以即使 React Native 中没有 form 相关的概念，依然适用。由于官网已经给出了 react 的相关例子，因此我在记录时，改用 React Native，同时在例子中配合使用了 immutable。</p><h2 id="将-form-加入到-reducer-中"><a href="#将-form-加入到-reducer-中" class="headerlink" title="将 form 加入到 reducer 中"></a>将 form 加入到 reducer 中</h2><p>redux/reducers/index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux-immutable'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> form &#125; <span class="keyword">from</span> <span class="string">'redux-form/immutable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appReducers = combineReducers(&#123;</span><br><span class="line">  <span class="comment">// ...你的其他reducers</span></span><br><span class="line">  form</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="使用-Form-高阶组件包裹原组件"><a href="#使用-Form-高阶组件包裹原组件" class="headerlink" title="使用 Form 高阶组件包裹原组件"></a>使用 Form 高阶组件包裹原组件</h2><p>containers/SendMessage.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SendMessageForm = reduxForm(&#123; <span class="attr">form</span>: <span class="string">'message'</span> &#125;)(SendMessageView);</span><br></pre></td></tr></table></figure></p><p>高阶组键一般采用<em>柯里化</em>的方式传递参数，当前步骤需要两个参数，这里的 SendMessageView 为表单界面的 UI 组件</p><h2 id="使用-Field-组建包裹表单控件（如-Input-Select…）"><a href="#使用-Field-组建包裹表单控件（如-Input-Select…）" class="headerlink" title="使用 Field 组建包裹表单控件（如 Input,Select…）"></a>使用 Field 组建包裹<em>表单控件</em>（如 Input,Select…）</h2><p>containers/SendMessage.js<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Field</span><br><span class="line">  name=<span class="string">"theme"</span></span><br><span class="line">  component=&#123;CommonInput&#125;</span><br><span class="line">  placeholder=<span class="string">"请输入主题"</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>将CommonInput作为component属性的参数传入，如果CommonInput也需要某写属性，可直接作为Field的属性传入。同时，我也打印了日志文件的输出（通过<a href="https://redux-saga.js.org/docs/advanced/FutureActions.html" target="_blank" rel="noopener">redux-saga</a>创建的一个简单日志），可以“监听”redux的一举一动。<br><strong>日志：</strong> action {type: “@@redux-form/REGISTER_FIELD”, meta: {…}, payload: {…}}</p><h2 id="改造表单控件"><a href="#改造表单控件" class="headerlink" title="改造表单控件"></a>改造表单控件</h2><p>components/CommonInput.js<br><strong>改造前</strong><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Input &#125; <span class="keyword">from</span> <span class="string">'teaset'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入框</span></span><br><span class="line"><span class="keyword">const</span> CommonInput = (&#123;</span><br><span class="line">  placeholder = <span class="literal">null</span>,</span><br><span class="line">  value = <span class="literal">null</span>,</span><br><span class="line">  onChangeText = <span class="literal">null</span>,</span><br><span class="line">  width = <span class="number">150</span>,</span><br><span class="line">  height = <span class="number">34</span>,</span><br><span class="line">  ...rest</span><br><span class="line">&#125;) =&gt; (</span><br><span class="line">  &lt;Input</span><br><span class="line">    style=&#123;&#123; width, height &#125;&#125;</span><br><span class="line">    placeholder=&#123;placeholder&#125;</span><br><span class="line">    value=&#123;value&#125;</span><br><span class="line">    onChangeText=&#123;onChangeText&#125;</span><br><span class="line">    &#123;...rest&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><strong>改造后</strong><br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CommonInput = (&#123;</span><br><span class="line">  placeholder = <span class="literal">null</span>,</span><br><span class="line">  width = <span class="number">150</span>,</span><br><span class="line">  height = <span class="number">34</span>,</span><br><span class="line">  input,</span><br><span class="line">  ...rest</span><br><span class="line">&#125;) =&gt; (</span><br><span class="line">  &lt;Input</span><br><span class="line">    style=&#123;&#123; width, height &#125;&#125;</span><br><span class="line">    placeholder=&#123;placeholder&#125;</span><br><span class="line">    value=&#123;input &amp;&amp; input.value ? input.value : <span class="literal">null</span>&#125;</span><br><span class="line">    onChangeText=&#123;inputText =&gt; input.onChange(inputText)&#125;</span><br><span class="line">    &#123;...rest&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>通过redux-form自动传入的属性input，我们可以获取和修改相应的state。<br><strong>日志：</strong><br>action {type: “@@redux-form/CHANGE”, meta: {…}, payload: “S”}</p><p>action {type: “@@redux-form/CHANGE”, meta: {…}, payload: “Sd”}</p><p>action {type: “@@redux-form/CHANGE”, meta: {…}, payload: “Sdf”}</p><h2 id="添加表单同步验证"><a href="#添加表单同步验证" class="headerlink" title="添加表单同步验证"></a>添加表单同步验证</h2><p>containers/SendMessage.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validate = <span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> errors = &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span> (!values.get(<span class="string">'theme'</span>)) &#123;</span><br><span class="line">    errors.theme = <span class="string">'Required'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> errors;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> SendMessageForm = reduxForm(&#123;</span><br><span class="line">  form: <span class="string">'message'</span>,</span><br><span class="line">  validate</span><br><span class="line">&#125;)(SendMessageView);</span><br></pre></td></tr></table></figure></p><p><strong>日志：</strong> action {type: “@@redux-form/UPDATE_SYNC_ERRORS”, meta: {…}, payload: {…}}</p><h2 id="通过formValueSelect快速获取字段"><a href="#通过formValueSelect快速获取字段" class="headerlink" title="通过formValueSelect快速获取字段"></a>通过formValueSelect快速获取字段</h2><p>containers/SendMessage.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reduxForm, Field, formValueSelector &#125; <span class="keyword">from</span> <span class="string">'redux-form/immutable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> select = formValueSelector(<span class="string">'message'</span>);</span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">  users:</span><br><span class="line">    state.getIn([<span class="string">'employees'</span>, <span class="string">'data'</span>]) &amp;&amp;</span><br><span class="line">    state.getIn([<span class="string">'employees'</span>, <span class="string">'data'</span>]).toJS(),</span><br><span class="line">  company: select(state, <span class="string">'company'</span>),</span><br><span class="line">  dept: select(state, <span class="string">'dept'</span>),</span><br><span class="line">  sendName: state.getIn([<span class="string">'auth'</span>, <span class="string">'data'</span>, <span class="string">'name'</span>])</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h2><p>提交表单时，会根据validate函数自动验证,如果失败，则不会触发处理提交的函数</p><p>containers/SendMessage.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">submit = <span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    employee,</span><br><span class="line">    lx,</span><br><span class="line">    theme,</span><br><span class="line">    content,</span><br><span class="line">    zt,</span><br><span class="line">    action</span><br><span class="line">  &#125; = values.toJS();</span><br><span class="line">  <span class="keyword">this</span>.props.sendMessageFetch(</span><br><span class="line">    employee,</span><br><span class="line">    <span class="keyword">this</span>.props.sendName,</span><br><span class="line">    lx,</span><br><span class="line">    theme,</span><br><span class="line">    content,</span><br><span class="line">    zt,</span><br><span class="line">    action</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">this</span>.props.reset();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;Button</span><br><span class="line">  title=<span class="string">"发送"</span></span><br><span class="line">  backgroundColor=&#123;AppColor.SUCCESS&#125;</span><br><span class="line">  borderRadius=&#123;<span class="number">5</span>&#125;</span><br><span class="line">  containerViewStyle=&#123;CommonStyles.elementButton&#125;</span><br><span class="line">  onPress=&#123;<span class="keyword">this</span>.props.handleSubmit(<span class="keyword">this</span>.submit)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><p>这里与react中有些区别，需要handlesubmit属性去触发onSubmit事件，然后将处理提交的函数作为其参数。</p><h2 id="清空表单"><a href="#清空表单" class="headerlink" title="清空表单"></a>清空表单</h2><p>containers/SendMessage.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.reset();</span><br></pre></td></tr></table></figure></p><h2 id="改值"><a href="#改值" class="headerlink" title="改值"></a>改值</h2><p>containers/SendMessage.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.change(<span class="string">'fieldName'</span>, values);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;无论再那种应用中，表单都是一种常见的提交数据的方式，在 reac 或 react native 中也不例外。但是，当通过 redux 来管理应用的数据之后，该如何来构建表单的数据流呢？或者更简单的说，对于使用 redux 处理表单的数据，需要哪些 Action 呢？经过简单
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="redux" scheme="http://yoursite.com/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://yoursite.com/2018/01/08/git-commmand/"/>
    <id>http://yoursite.com/2018/01/08/git-commmand/</id>
    <published>2018-01-08T05:00:40.000Z</published>
    <updated>2018-01-09T14:49:22.197Z</updated>
    
    <content type="html"><![CDATA[<p>git是一个分布式版本控制工具，与CVS、SVN一类的集中式控制工具不同就，分布式版本库不需要服务器端软件，就可以运作版本控制。除此之外，git和其他版本控制工具还有不少的差别，git本身关心文件的整体性是否又改变，但多数的版本控制系统如CVS则再无文件内容的差异；git更像一个文件系统，直接在本机上获取数据而不必链接到主机端，每个开发者都拥有全部开发历史的本地副本。但是如果要与小伙伴们合作开发，还是需要将changes提交到远程的<em>代码仓库</em>（如<a href="https://github.com" target="_blank" rel="noopener">github</a>、<a href="https://gitee.com" target="_blank" rel="noopener">码云</a>、<a href="https://about.gitlab.com" target="_blank" rel="noopener">gitlab</a>、<a href="https://coding.net" target="_blank" rel="noopener">coding</a>）。这些changes可以作为新增的开发分支导入，也可以与本地开发分支合并。</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><ul><li><strong>初始化本地仓库</strong></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><ul><li><strong>把要提交的changes放到暂存区</strong></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><ul><li><strong>将暂存区的所有changes提交到分支</strong></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">"Initial Commit"</span></span><br></pre></td></tr></table></figure><ul><li><strong>添加远程仓库（origin为远程仓库的名字）</strong></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:uername/reponsitory.git</span><br></pre></td></tr></table></figure><ul><li><strong>将本地库的内容（master分支）推送到远程库（origin）,-u选项可以将远程库与本地库的分支关联起来</strong></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><p>无论一个项目是否是由多人合作开发，分支管理都有其存在的必要性。一般来说，除却仓库初始化时会自动建立主分支（即master分支），以后的每一次开发或迭代都需要基于自己创建的开发分支，当开发分支上的项目确认没有bug之后，才能够和master分支合并。可以想象，如果在开发分支上的代码出现了难以处理的bug的时候，我们依然可以切换回master分支或者其他分支来获取能正常运行的项目。</p><h3 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><h3 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><h3 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r</span><br></pre></td></tr></table></figure><h3 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch [name]</span><br></pre></td></tr></table></figure><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout [name]</span><br></pre></td></tr></table></figure><h3 id="创建新分支并立即切换到新分支"><a href="#创建新分支并立即切换到新分支" class="headerlink" title="创建新分支并立即切换到新分支"></a>创建新分支并立即切换到新分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b [name]</span><br></pre></td></tr></table></figure><h3 id="推送本地分支"><a href="#推送本地分支" class="headerlink" title="推送本地分支"></a>推送本地分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push [远程仓库名] [本地分支名]:[远程分支名]</span><br></pre></td></tr></table></figure><h3 id="获取远程分支"><a href="#获取远程分支" class="headerlink" title="获取远程分支"></a>获取远程分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [远程仓库名]/[远程分支名]</span><br></pre></td></tr></table></figure><h3 id="更新本地分支"><a href="#更新本地分支" class="headerlink" title="更新本地分支"></a>更新本地分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [远程仓库名] [远程分支名]:[本地分支名]</span><br></pre></td></tr></table></figure><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge [name]</span><br></pre></td></tr></table></figure><h3 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title="删除本地分支"></a>删除本地分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d [name]</span><br><span class="line">git branch -D [name]</span><br></pre></td></tr></table></figure><p>-d选项只能删除已合并的分支</p><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [远程仓库名] :[远程分支名]</span><br></pre></td></tr></table></figure><h2 id="打标签-打版本号"><a href="#打标签-打版本号" class="headerlink" title="打标签(打版本号)"></a>打标签(打版本号)</h2><h3 id="显示已有标签"><a href="#显示已有标签" class="headerlink" title="显示已有标签"></a>显示已有标签</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="新建标签"><a href="#新建标签" class="headerlink" title="新建标签"></a>新建标签</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag [标签名]</span><br></pre></td></tr></table></figure><h3 id="查看相应标签的版本信息"><a href="#查看相应标签的版本信息" class="headerlink" title="查看相应标签的版本信息"></a>查看相应标签的版本信息</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show [标签名]</span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d [标签名]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git是一个分布式版本控制工具，与CVS、SVN一类的集中式控制工具不同就，分布式版本库不需要服务器端软件，就可以运作版本控制。除此之外，git和其他版本控制工具还有不少的差别，git本身关心文件的整体性是否又改变，但多数的版本控制系统如CVS则再无文件内容的差异；git更
      
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/07/hello-world/"/>
    <id>http://yoursite.com/2018/01/07/hello-world/</id>
    <published>2018-01-06T16:00:00.000Z</published>
    <updated>2018-01-08T05:10:24.643Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
