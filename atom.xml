<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-27T08:40:20.634Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js 基础</title>
    <link href="http://yoursite.com/2018/04/27/js-basic/"/>
    <id>http://yoursite.com/2018/04/27/js-basic/</id>
    <published>2018-04-27T07:43:27.000Z</published>
    <updated>2018-04-27T08:40:20.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>undefined</li><li>boolean</li><li><p>string<br>把一个值转换为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> found = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> foundAsString = found.toString(); <span class="comment">// 字符串"true"</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">alert(num.toString(<span class="number">8</span>)); <span class="comment">// "12"</span></span><br></pre></td></tr></table></figure><p>在不知道数值是不是null或undefiend的情况下可以使用String函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">alert(<span class="built_in">String</span>(value)); <span class="comment">// "null"</span></span><br></pre></td></tr></table></figure></li><li><p>number<br>将各种数据类型转换位number</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="number">070</span>); <span class="comment">// 56</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">16</span>); <span class="comment">// 16</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">"3.125e7"</span>); <span class="comment">// 31250000</span></span><br></pre></td></tr></table></figure></li><li><p>object</p></li><li>function</li></ul><h2 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h2><p>按位非<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = ~num1;</span><br><span class="line">alert(num2); <span class="comment">// -26</span></span><br></pre></td></tr></table></figure></p><p>按位与<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">25</span> &amp; <span class="number">3</span>;</span><br><span class="line">alert(result); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>按位或<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">25</span> | <span class="number">3</span>;</span><br><span class="line">alert(result); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure></p><p>按位异或<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">25</span> ^ <span class="number">3</span>;</span><br><span class="line">alert(result) <span class="comment">// 26</span></span><br></pre></td></tr></table></figure></p><p>有符号数左移、右移动<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldValue = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(oldValue &lt;&lt; <span class="number">5</span>); <span class="comment">// 64</span></span><br></pre></td></tr></table></figure></p><p>无符号数左移、右移<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldValue = <span class="number">-64</span>;</span><br><span class="line"><span class="built_in">console</span>.log(oldValue &gt;&gt;&gt; <span class="number">5</span>); <span class="comment">// 134217726</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;&lt;p&gt;string&lt;br&gt;把一个值转换为
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>React Router</title>
    <link href="http://yoursite.com/2018/04/24/react-router/"/>
    <id>http://yoursite.com/2018/04/24/react-router/</id>
    <published>2018-04-24T00:48:46.000Z</published>
    <updated>2018-04-24T07:51:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本使用方式"><a href="#基本使用方式" class="headerlink" title="基本使用方式"></a>基本使用方式</h2><p>设计路由结构（嵌套和路由参数）:</p><ul><li>Home</li><li>About</li><li>Topic<ul><li>Rendering</li><li>Component</li><li>Prop v state</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BasicExample = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/about"</span>&gt;About&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/topics"</span>&gt;Topics&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">      &lt;hr /</span>&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Route exact path=<span class="string">"/"</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/about"</span> component=&#123;About&#125; /&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/topics"</span> component=&#123;Topics&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Router&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;About&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Topics = <span class="function">(<span class="params">&#123; match &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Topics&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link to=&#123;`$&#123;match.url&#125;/</span>rendering<span class="string">`&#125;&gt;Rendering&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to=&#123;`</span>$&#123;match.url&#125;/components<span class="string">`&#125;&gt;Component&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;</span></span><br><span class="line"><span class="string">        &lt;Link to=&#123;`</span>$&#123;match.url&#125;/props-v-state<span class="string">`&#125;&gt;Props v state&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;Route path=&#123;`</span>$&#123;match.url&#125;/:topicId<span class="string">`&#125; component=&#123;Topic&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;Route</span></span><br><span class="line"><span class="string">      exact</span></span><br><span class="line"><span class="string">      path=&#123;match.url&#125;</span></span><br><span class="line"><span class="string">      render=&#123;() =&gt; &lt;h3&gt;Please select a toipic&lt;/h3&gt;&#125;</span></span><br><span class="line"><span class="string">    /&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const Topic = (&#123; match &#125;) =&gt; (</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h3&gt;&#123;match.params.topicId&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default BasicExample</span></span><br></pre></td></tr></table></figure><h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2><p>以用户登陆为例，主要通过自定义路由，重定向来完成登陆功能。</p><p>主界面, public为公共界面，不登陆也能浏览，Proteted界面只有登陆了之后才能进入，否则会显示登陆提示。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AuthExample = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;AuthButton /&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/public"</span>&gt;Public Page&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/protected"</span>&gt;Protected Page&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Route path="/</span>public<span class="string">" component=&#123;Public&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/login<span class="string">" component=&#123;Login&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;PrivateRoute path="</span>/protected<span class="string">" component=&#123;Protected&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure></p><p>登陆标志，以及登陆和退出的方法，这里用定时器来模拟异步。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fakeAuth = &#123;</span><br><span class="line">  isAuthenticated: <span class="literal">false</span>,</span><br><span class="line">  authenticate(cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.isAuthenticated = <span class="literal">true</span></span><br><span class="line">    setTimeout(cb, <span class="number">100</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  signout(cb) &#123;</span><br><span class="line">    <span class="keyword">this</span>.isAuthenticated = <span class="literal">false</span></span><br><span class="line">    setTimeout(cb, <span class="number">100</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>退出按钮，由于登陆成功后，需要重新回到主页，因此可以使用withRouter高阶组件，通过该组件，可以在任何地方访问打history对象。我们可以将路由想象成一个栈的存储结构，通过push方法，可以替换当前栈中的条目，这个方法可以解决用户退出后，使用浏览器后退按钮时，依然可以进入被保护的页面的问题。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AuthButton = withRouter(</span><br><span class="line">  (&#123; history &#125;) =&gt;</span><br><span class="line">    fakeAuth.isAuthenticated ? (</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        Welcome!&#123;<span class="string">' '</span>&#125;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick=&#123;() =&gt; &#123;</span><br><span class="line">            fakeAuth.signout(<span class="function"><span class="params">()</span> =&gt;</span> history.push(<span class="string">'/'</span>))</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          Sign out</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>p&gt;</span><br><span class="line">    ) : (</span><br><span class="line">      &lt;p&gt;You are not logged <span class="keyword">in</span>.&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    ),</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure></p><p>自定义路由，本质是对Route组件的包装。由于protected具有权限性，只有登陆的用户才能查看，而没有登陆的用户会重定向到登陆界面，所以需要通过自定义路由来对该页面进行权限判定。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PrivateRoute = <span class="function">(<span class="params">&#123; component: Component, ...rest &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;Route</span><br><span class="line">    &#123;...rest&#125;</span><br><span class="line">    render=&#123;props =&gt;</span><br><span class="line">      fakeAuth.isAuthenticated ? (</span><br><span class="line">        &lt;Component &#123;...props&#125; /&gt;</span><br><span class="line">      ) : (</span><br><span class="line">        &lt;Redirect</span><br><span class="line">          to=&#123;&#123;</span><br><span class="line">            pathname: <span class="string">'/login'</span>,</span><br><span class="line">            state: &#123; <span class="attr">from</span>: props.location &#125;,</span><br><span class="line">          &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  /&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>Login组件有一个需要注意的地方，一般地，为了提高用户的体验度，登陆成功之后，需要重定向回到登陆之前的界面，例如我们是从protected界面进入login界面的，则重定向至protected界面，而不是跳转至其它界面。通过location.state.from能看到是从哪个界面进入界面的，也就是字面意思的，来自哪个界面。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Public = <span class="function"><span class="params">()</span> =&gt;</span> &lt;h3&gt;Public&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Protected = () =&gt; &lt;h3&gt;Protected&lt;/</span>h3&gt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    redirectToReferrer: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  login = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    fakeAuth.authenticate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">redirectToReferrer</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="keyword">from</span> &#125; = <span class="keyword">this</span>.props.location.state || &#123; <span class="attr">from</span>: &#123; <span class="attr">pathname</span>: <span class="string">'/'</span> &#125; &#125;</span><br><span class="line">    <span class="keyword">const</span> &#123; redirectToReferrer &#125; = <span class="keyword">this</span>.state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (redirectToReferrer) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#123;from&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;You must log in to view the page at &#123;from.pathname&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button onClick=&#123;this.login&#125;&gt;Log in&lt;/button&gt;</span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    )</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="Switch（构建404页面的路由）"><a href="#Switch（构建404页面的路由）" class="headerlink" title="Switch（构建404页面的路由）"></a>Switch（构建404页面的路由）</h2><p>需要解决的问题: 一个组件下有多个route，而我们只要去匹配到其中一个route，如果匹配成功，则只显示该route的内容，而不需要继续往下判断。在这个例子中我们会构造许多链接，如果该链接的路由不存在，那么会自动进入404页面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NoMatchExample = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/"</span>&gt;Home&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/old-match"</span>&gt;Old Match, to be redirected&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/will-match"</span>&gt;Will Match&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/will-not-match"</span>&gt;Will Not Match&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;Link to=<span class="string">"/also/will/not/match"</span>&gt;Also Will Not Match&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>li&gt;</span><br><span class="line">      &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/</span><span class="string">" exact component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Redirect from="</span>/old-match<span class="string">" to="</span>/will-match<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/will-match<span class="string">" component=&#123;WillMatch&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route component=&#123;NoMatch&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本使用方式&quot;&gt;&lt;a href=&quot;#基本使用方式&quot; class=&quot;headerlink&quot; title=&quot;基本使用方式&quot;&gt;&lt;/a&gt;基本使用方式&lt;/h2&gt;&lt;p&gt;设计路由结构（嵌套和路由参数）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Home&lt;/li&gt;
&lt;li&gt;About&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>CSS要点</title>
    <link href="http://yoursite.com/2018/04/19/css-emphasis/"/>
    <id>http://yoursite.com/2018/04/19/css-emphasis/</id>
    <published>2018-04-19T00:56:04.000Z</published>
    <updated>2018-04-27T07:02:51.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p><strong>元素选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-clor</span>: DodgerBlue;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>类选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.classy</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ID选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#identified</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>通配符选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-attr">[lang^=en]</span>&#123;<span class="attribute">color</span>:green;&#125;</span><br><span class="line">*<span class="selector-class">.warning</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line">*<span class="selector-id">#maincontent</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid blue;&#125;</span><br></pre></td></tr></table></figure></p><p><strong>属性选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang]</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang~="en-us"]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[lang|="zh"]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^="#"]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*="example"]</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: silver;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*="insensitive" i]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: cyan;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href$=".org"]</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>相邻兄弟选择器</strong><br>只能作用到相邻兄弟<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> + <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> + <span class="selector-tag">span</span><span class="selector-class">.caption</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>通用兄弟选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> ~ <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>子选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: DodgerBlue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>后代选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> <span class="selector-tag">span</span> &#123; <span class="attribute">background-color</span>: DodgerBlue; &#125;</span><br></pre></td></tr></table></figure></p><p><strong>伪类选择器</strong><br>不在文档中生成新的元素，只在原有元素的基础上改变样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123; <span class="attribute">color</span>: blue &#125; <span class="comment">/* 未访问链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123; <span class="attribute">color</span>: purple &#125; <span class="comment">/* 已访问链接 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; <span class="attribute">font-weight</span>: bold &#125; <span class="comment">/* 用户鼠标悬停 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123; <span class="attribute">color</span>: lime &#125; <span class="comment">/* 激活链接 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type="text"]</span><span class="selector-pseudo">:disabled</span> &#123; <span class="attribute">background</span>: <span class="number">#ccc</span>; &#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:enabled</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#22AA22</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:empty</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: lime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lime;</span><br><span class="line">&#125; <span class="comment">/*一组兄弟元素中的第一个元素*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:not(.classy)</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-pseudo">:not(p)</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.second</span> <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child(2n+1)</span>,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p><strong>伪元素选择器</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">::before</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"«"</span>;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">::after</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"»"</span>;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;<span class="comment">/* 配合q标签使用效果比较特殊*/</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="优先级和专用性"><a href="#优先级和专用性" class="headerlink" title="优先级和专用性"></a>优先级和专用性</h2><p><strong>通配选择符</strong>（universal selector）(*), 关系选择符（combinators） (+, &gt;, ~, ‘ ‘)  和 否定伪类（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。</p><ul><li><strong>类型选择器</strong>（type selectors）（例如, h1）和 伪元素（pseudo-elements）（例如, ::before）</li><li><strong>类选择器</strong>（class selectors） (例如,.example)，属性选择器（attributes selectors）（例如, [type=”radio”]），伪类（pseudo-classes）（例如, :hover）</li><li><strong>ID选择器</strong>（例如, #example）</li></ul><p><strong>!important</strong> 例外，此声明将覆盖任何其它声明，使用 !important 是一个坏习惯，应该尽量避免，因为这破坏了样式表中的固有的级联规则 使得调试找bug变得更加困难了。</p><p>由于优先级的概念比较抽象，可以使用一个千位数将优先级具体化(专用性):</p><ul><li>千位：如果声明是在style 属性中该列加1分（这样的声明没有选择器，所以它们的专用性总是1000。）否则为0。</li><li>百位：在整个选择器中每包含一个ID选择器就在该列中加1分。</li><li>十位：在整个选择器中每包含一个类选择器、属性选择器、或者伪类就在该列中加1分。</li><li>个位：在整个选择器中每包含一个元素选择器或伪元素就在该列中加1分。</li></ul><p>通用选择器 (*), 复合选择器 (+, &gt;, ~, ‘ ‘) 和否定伪类 (:not) 在专用性中无影响。</p><p>例子：</p><table><thead><tr><th style="text-align:left">选择器</th><th style="text-align:center">千位</th><th style="text-align:center">百位</th><th style="text-align:center">十位</th><th style="text-align:center">个位</th><th style="text-align:center">合计值</th></tr></thead><tbody><tr><td style="text-align:left">h1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0001</td></tr><tr><td style="text-align:left">#important</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0100</td></tr><tr><td style="text-align:left">h1 + p::first-letter</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">3</td><td style="text-align:center">0003</td></tr><tr><td style="text-align:left">li &gt; a[href*=”zh-CN”] &gt; .inline-warning</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">0022</td></tr><tr><td style="text-align:left">#important div &gt; div &gt; a:hover, 在一个元素的 style 属性里</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1113</td></tr></tbody></table><h2 id="值和单位"><a href="#值和单位" class="headerlink" title="值和单位"></a>值和单位</h2><p><strong>像素 (px)</strong> 是一种绝对单位（absolute units）， 因为无论其他相关的设置怎么变化，像素指定的值是不会变化的。其他的绝对单位如下：</p><ul><li>mm, cm, in: 毫米（Millimeters），厘米（centimeters），英寸（inches）</li><li>pt, pc: 点（Points (1/72 of an inch)）， 十二点活字（ picas (12 points.)）</li></ul><p>也有相对单位，他们是相对于当前元素的字号（ font-size ）或者视口（viewport ）尺寸。</p><ul><li><strong>em</strong>:1em与当前元素的字体大小相同（更具体地说，一个大写字母M的宽度）。CSS样式被应用之前，浏览器给网页设置的默认基础字体大小是16像素，这意味着对一个元素来说1em的计算值默认为16像素。但是要小心—em单位是会继承父元素的字体大小，所以如果在父元素上设置了不同的字体大小，em的像素值就会变得复杂。现在不要过于担心这个问题，我们将在后面的文章和模块中更详细地介绍继承和字体大小设置。em是Web开发中最常用的相对单位。</li><li><strong>ex, ch</strong>: 分别是小写x的高度和数字0的宽度。这些并不像em那样被普遍使用或很好地被支持。</li><li><strong>rem</strong>: REM（root em）和em以同样的方式工作，但它总是等于默认基础字体大小的尺寸；继承的字体大小将不起作用，所以这听起来像一个比em更好的选择，虽然在旧版本的IE上不被支持（查看关于跨浏览器支持 Debugging CSS.)</li><li><strong>vw, vh</strong>: 分别是视口宽度的1/100和视口高度的1/100，其次，它不像rem那样被广泛支持。</li></ul><p>还可以使用百分比值指定可以通过特定数值指定的大部分内容。这使我们可以创建，例如，其宽度总是会移动到其父容器宽度的一定百分比的框中。这可以与那些将其宽度设置为某个单位值（如px或ems）的框进行比较，它们的长度总是保持相同的长度，即使它们的父容器的宽度发生变化。</p><p>可以设置font-size的百分比为200%。它将和预计的工作方式有一点不同，但这是讲得通的，它的新大小是相对于父容器的字体大小的，就像em一样。在这种情况下，父容器的字体大小为16px——页面的默认值，所以计算的值为16px的200%，或32px。这和em的风格确实很类似—200%基本上和2em一样。</p><ul><li>fr 剩余空间系数，对于一个容器的剩余空间按比例分配，通常用在布局属性中</li><li>ch 0字符的宽度</li></ul><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p><strong>font-family取值</strong><br>family-name 字体族名；<br>generic-name 通用字体族名：<br>serif<br>带衬线字体，笔画结尾有特殊的装饰线或衬线。</p><p>sans-serif<br>无衬线字体，即笔画结尾是平滑的字体。</p><p>monospace<br>等宽字体，即字体中每个字宽度相同。</p><p>cursive<br>草书字体。这种字体有的有连笔，有的还有特殊的斜体效果。因为一般这种字体都有一点连笔效果，所以会给人一种手写的感觉。</p><p>fantasy<br>Fantasy字体主要是那些具有特殊艺术效果的字体。</p><p><strong>font-stretch</strong><br>normal<br>指定默认字体<br>semi-condensed, condensed, extra-condensed, ultra-condensed<br>小于默认字体，其中ultra-condensed是缩的最小的字体<br>semi-expanded, expanded, extra-expanded, ultra-expanded<br>大于默认字体的值</p><p><strong>font-size-adjust</strong> CSS属性定义字体大小应取决于小写字母，而不是大写字母。</p><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>简单线性渐变<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 旧语法，带前缀并且已经废弃，以支持老版本的浏览器 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-prefix-linear-zgradient</span>(<span class="selector-tag">top</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">white</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新语法，不带前缀，以支持标准兼容的浏览器（Opera 12.1， IE 10， Firefox 16， Chrome 26， Safari 6.1） */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">white</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 旧语法，带前缀并且已经废弃，以支持老版本的浏览器 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-prefix-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">white</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新语法，不带前缀，以支持标准兼容的浏览器（Opera 12.1， IE 10， Firefox 16， Chrome 26， Safari 6.1） */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">white</span>);</span><br></pre></td></tr></table></figure></p><p>使用角度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(70<span class="selector-tag">deg</span>, <span class="selector-tag">black</span>, <span class="selector-tag">white</span>);</span><br></pre></td></tr></table></figure></p><p>三个色标<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 旧语法，带前缀并且已经废弃，以支持老版本的浏览器  */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-prefix-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">white</span> 80%, <span class="selector-tag">orange</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新语法，不带前缀，以支持标准兼容的浏览器（Opera 12.1， IE 10， Firefox 16， Chrome 26， Safari 6.1） */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-tag">blue</span>, <span class="selector-tag">white</span> 80%, <span class="selector-tag">orange</span>);</span><br></pre></td></tr></table></figure></p><p>等间距色标<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 旧语法，带前缀并且已经废弃，以支持老版本的浏览器 */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">-prefix-linear-gradient</span>(<span class="selector-tag">left</span>, <span class="selector-tag">red</span>, <span class="selector-tag">orange</span>, <span class="selector-tag">yellow</span>, <span class="selector-tag">green</span>, <span class="selector-tag">blue</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新语法，不带前缀，以支持标准兼容的浏览器（Opera 12.1， IE 10， Firefox 16， Chrome 26， Safari 6.1） */</span></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">right</span>, <span class="selector-tag">red</span>, <span class="selector-tag">orange</span>, <span class="selector-tag">yellow</span>, <span class="selector-tag">green</span>, <span class="selector-tag">blue</span>);</span><br></pre></td></tr></table></figure></p><p>透明和渐变</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*  旧语法，带前缀并且已经废弃，以支持老版本的浏览器 */</span> </span><br><span class="line">background: -prefix-linear-gradient(left, rgba(255,255,255,0), rgba(255,255,255,1)), url(http://foo.com/image.jpg);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 新语法，不带前缀，以支持标准兼容的浏览器（Opera 12.1， IE 10， Firefox 16， Chrome 26， Safari 6.1） */</span>  </span><br><span class="line">background: linear-gradient(to right, rgba(255,255,255,0), rgba(255,255,255,1)), url(http://foo.com/image.jpg);</span><br></pre></td></tr></table></figure><p>径向渐变<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">red</span> 5%, <span class="selector-tag">yellow</span> 25%, <span class="selector-id">#1E90FF</span> 50%);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">ellipse</span> <span class="selector-tag">closest-side</span>, <span class="selector-tag">red</span>, <span class="selector-tag">yellow</span> 10%, <span class="selector-id">#1E90FF</span> 50%, <span class="selector-tag">white</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">ellipse</span> <span class="selector-tag">farthest-corner</span>, <span class="selector-tag">red</span>, <span class="selector-tag">yellow</span> 10%, <span class="selector-id">#1E90FF</span> 50%, <span class="selector-tag">white</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">radial-gradient</span>(<span class="selector-tag">circle</span> <span class="selector-tag">closest-side</span>, <span class="selector-tag">red</span>, <span class="selector-tag">yellow</span> 10%, <span class="selector-id">#1E90FF</span> 50%, <span class="selector-tag">white</span>);</span><br></pre></td></tr></table></figure></p><p>重复渐变<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-linear-gradient</span>(<span class="selector-tag">-45deg</span>, <span class="selector-tag">red</span>, <span class="selector-tag">red</span> 5<span class="selector-tag">px</span>, <span class="selector-tag">white</span> 5<span class="selector-tag">px</span>, <span class="selector-tag">white</span> 10<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">repeating-radial-gradient</span>(<span class="selector-tag">black</span>, <span class="selector-tag">black</span> 5<span class="selector-tag">px</span>, <span class="selector-tag">white</span> 5<span class="selector-tag">px</span>, <span class="selector-tag">white</span> 10<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure></p><p>多背景重复渐变<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">repeating-linear-gradient</span>(</span><br><span class="line">    90<span class="selector-tag">deg</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 50<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 127, 0, 0<span class="selector-class">.25</span>) 50<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 127, 0, 0<span class="selector-class">.25</span>) 56<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 56<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 63<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 127, 0, 0<span class="selector-class">.25</span>) 63<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 127, 0, 0<span class="selector-class">.25</span>) 69<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 69<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 116<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 206, 0, 0<span class="selector-class">.25</span>) 116<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 206, 0, 0<span class="selector-class">.25</span>) 166<span class="selector-tag">px</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="selector-tag">repeating-linear-gradient</span>(</span><br><span class="line">    0<span class="selector-tag">deg</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 50<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 127, 0, 0<span class="selector-class">.25</span>) 50<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 127, 0, 0<span class="selector-class">.25</span>) 56<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 56<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 63<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 127, 0, 0<span class="selector-class">.25</span>) 63<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 127, 0, 0<span class="selector-class">.25</span>) 69<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 69<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 116<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 206, 0, 0<span class="selector-class">.25</span>) 116<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(255, 206, 0, 0<span class="selector-class">.25</span>) 166<span class="selector-tag">px</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="selector-tag">repeating-linear-gradient</span>(</span><br><span class="line">    <span class="selector-tag">-45deg</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 5<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(143, 77, 63, 0<span class="selector-class">.25</span>) 5<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(143, 77, 63, 0<span class="selector-class">.25</span>) 10<span class="selector-tag">px</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="selector-tag">repeating-linear-gradient</span>(</span><br><span class="line">    45<span class="selector-tag">deg</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span>,</span><br><span class="line">    <span class="selector-tag">transparent</span> 5<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(143, 77, 63, 0<span class="selector-class">.25</span>) 5<span class="selector-tag">px</span>,</span><br><span class="line">    <span class="selector-tag">rgba</span>(143, 77, 63, 0<span class="selector-class">.25</span>) 10<span class="selector-tag">px</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></p><h2 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h2><p><strong>外边距塌陷</strong><br>块的顶部外边距和底部外边距有时被组合（折叠）为单个边框，其大小是组合到其中的最大外边距，这种行为称为外边距塌陷（合并）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#wrapper</span> &gt; <span class="selector-tag">main</span>&#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#wrapper</span> &gt; <span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">99px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span>Main content<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>溢流</strong><br>当使用绝对的值设置了一个框的大小（如，固定像素的宽/高），允许的大小可能不适合放置内容，这种情况下内容会从盒子溢流。我们使用overflow属性来控制这种情况的发生。它有一些可能的值，但是最常用的是：</p><ul><li>auto: 当内容过多，溢流的内容被隐藏，然后出现滚动条来让我们滚动查看所有的内容。</li><li>hidden: 当内容过多，溢流的内容被隐藏。</li><li>visible: 当内容过多，溢流的内容被显示在盒子的外边（这个是默认的行为）</li></ul><h2 id="多列布局"><a href="#多列布局" class="headerlink" title="多列布局"></a>多列布局</h2><p>通常文字都是一整段显示的，而多列属性可以把文字分成多段。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">column-width</span>: <span class="number">30em</span>;</span><br><span class="line">  <span class="attribute">columns</span>: <span class="number">20em</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p><strong>父容器使用的属性:</strong><br>使用flex布局(兼容性)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义主轴方向，指定flex元素多行显示还是单行显示，以及简写。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">flex</span>: <span class="selector-tag">column</span>; <span class="comment">/* row | row-reverse | column | column-reverse */</span></span><br><span class="line"><span class="selector-tag">flex-wrap</span>: <span class="selector-tag">nowrap</span>; <span class="comment">/* nowrap | wrap | wrap-reverse */</span></span><br><span class="line"><span class="selector-tag">flex-flow</span>: <span class="selector-tag">column</span> <span class="selector-tag">wrap</span>;</span><br></pre></td></tr></table></figure></p><p>父容器分配主轴空间<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* space-between | space-around | space-evenly | stretch* /</span></span><br><span class="line"><span class="comment">/* center | start | end | flex-start | flex-end */</span></span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-between</span>;</span><br></pre></td></tr></table></figure></p><p>父容器分配侧轴空间，适用于多行的flex容器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">align-content</span>: <span class="selector-tag">space-around</span></span><br></pre></td></tr></table></figure></p><p>align-items 属性以与justify-content相同的方式在侧轴方向上将当前行上的弹性元素对齐。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>; <span class="comment">/* center | start | end | self-start | self-end | flex-start | flex-end */</span></span><br></pre></td></tr></table></figure></p><p><strong>子容器使用的属性:</strong><br>flex属性有三个参数: flex-grow，felx-shrink，felx-basis<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 单个值，定义了拉伸因子 flex-grow为 1 */</span></span><br><span class="line"><span class="selector-tag">flex</span>: 1;</span><br></pre></td></tr></table></figure></p><h2 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* 定义列的轨道模式*/</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>:  <span class="built_in">repeat</span>(3, 1fr);</span><br><span class="line">  <span class="comment">/* 网格间隙 */</span></span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="comment">/* 定义行的轨道模式*/</span></span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(100px, auto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="comment">/* 指定column start 和 column end*/</span></span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="comment">/* 指定row start 和 row end*/</span></span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h2 id="属性值简写"><a href="#属性值简写" class="headerlink" title="属性值简写"></a>属性值简写</h2><p>background: </p><ul><li>bg-color </li><li>bg-image </li><li>position/bg-size </li><li>bg-repeat </li><li>bg-origin </li><li>bg-clip </li><li>bg-attachment </li></ul><h2 id="transforms"><a href="#transforms" class="headerlink" title="transforms"></a>transforms</h2><p>语法<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Keyword values */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">none</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function values */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1<span class="selector-class">.0</span>, 2<span class="selector-class">.0</span>, 3<span class="selector-class">.0</span>, 4<span class="selector-class">.0</span>, 5<span class="selector-class">.0</span>, 6<span class="selector-class">.0</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(12<span class="selector-tag">px</span>, 50%);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(2<span class="selector-tag">em</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(3<span class="selector-tag">in</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(2, 0<span class="selector-class">.5</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleX</span>(2);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(0<span class="selector-class">.5</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(0<span class="selector-class">.5turn</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skew</span>(30<span class="selector-tag">deg</span>, 20<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewX</span>(30<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">skewY</span>(1<span class="selector-class">.07rad</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix3d</span>(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate3d</span>(12<span class="selector-tag">px</span>, 50%, 3<span class="selector-tag">em</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateZ</span>(2<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scale3d</span>(2<span class="selector-class">.5</span>, 1<span class="selector-class">.2</span>, 0<span class="selector-class">.3</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleZ</span>(0<span class="selector-class">.3</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate3d</span>(1, 2<span class="selector-class">.0</span>, 3<span class="selector-class">.0</span>, 10<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateX</span>(10<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateY</span>(10<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateZ</span>(10<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">perspective</span>(17<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple function values */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(10<span class="selector-tag">px</span>) <span class="selector-tag">rotate</span>(10<span class="selector-tag">deg</span>) <span class="selector-tag">translateY</span>(5<span class="selector-tag">px</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure></p><p>制作一个立方体<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cube pers250"</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face front"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face back"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face right"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face left"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face top"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"face bottom"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">75px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">backface-visibility</span>: visible;</span><br><span class="line">  <span class="attribute">perspective-origin</span>: <span class="number">150%</span> <span class="number">150%</span>;</span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.face</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Define each face based on direction */</span></span><br><span class="line"><span class="selector-class">.front</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.3);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.back</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 255, 0, 1);</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(180deg) <span class="built_in">translateZ</span>(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(196, 0, 0, 0.7);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(90deg) <span class="built_in">translateZ</span>(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 196, 0.7);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(-90deg) <span class="built_in">translateZ</span>(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.top</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(196, 196, 0, 0.7);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(90deg) <span class="built_in">translateZ</span>(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(196, 0, 196, 0.7);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(-90deg) <span class="built_in">translateZ</span>(50px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Make the table a little nicer */</span></span><br><span class="line"><span class="selector-tag">th</span>, <span class="selector-tag">p</span>, <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#EEEEEE</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p>简写<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: &lt;<span class="selector-tag">property</span>&gt; &lt;<span class="selector-tag">duration</span>&gt; &lt;<span class="selector-tag">timing-function</span>&gt; &lt;<span class="selector-tag">delay</span>&gt;;</span><br></pre></td></tr></table></figure></p><p>高亮菜单过渡效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sidebar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"home"</span> <span class="attr">class</span>=<span class="string">"menuButton"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"about"</span> <span class="attr">class</span>=<span class="string">"menuButton"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"contact"</span> <span class="attr">class</span>=<span class="string">"menuButton"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"links"</span> <span class="attr">class</span>=<span class="string">"menuButton"</span>&gt;</span>Links<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menuButton</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transition-property</span>: background-color, color;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">transition-timing-function</span>: ease-out;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: grey;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">26px</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-color</span>: black;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menuButton</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>:white;</span><br><span class="line">  <span class="attribute">color</span>:black;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">1px</span> black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>animation的子属性有:</p><ul><li>animation-delay<br>设置延时，即从元素加载完成之后到动画序列开始执行的这段时间。</li><li>animation-direction<br>设置动画在每次运行完后是反向运行还是重新回到开始位置重复运行。</li><li>animation-duration<br>设置动画一个周期的时长。</li><li>animation-iteration-count<br>设置动画重复次数， 可以指定infinite无限次重复动画</li><li>animation-name<br>指定由@keyframes描述的关键帧名称。</li><li>animation-play-state<br>允许暂停和恢复动画。</li><li>animation-timing-function<br>设置动画速度， 即通过建立加速度曲线，设置动画在关键帧之间是如何变化。</li><li>animation-fill-mode<br>指定动画执行前后如何为目标元素应用样式。</li></ul><p>duration | timing-function | delay |<br>iteration-count | direction | fill-mode | play-state | name</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> move_eye &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">20%</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cylon_eye</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right,</span><br><span class="line">      rgba(0, 0, 0, .9) <span class="number">25%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(0, 0, 0, .1) <span class="number">50%</span>,</span><br><span class="line">      <span class="built_in">rgba</span>(0, 0, 0, .9) <span class="number">75%</span>);</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">animation</span>: <span class="number">4s</span> linear <span class="number">0s</span> infinite alternate move_eye;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h2><p>additive-symbols 描述符 定义符号，用于值可累积的可数的 system的项 。 additive-symbols定义累积的的元组（tuples）,每个元组项都包含一个符号和一个非负整数的权重。additive system被用于构造sign-value numbering （符号-值，指数字的值就是是符号加在一起的值）系统，比如 罗马数字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">additive-symbols: 3 &quot;0&quot;;</span><br><span class="line">additive-symbols: 3 &quot;0&quot;, 2 &quot;\2E\20&quot;;</span><br><span class="line">additive-symbols: 3 &quot;0&quot;, 2 url(symbol.png);</span><br></pre></td></tr></table></figure></p><p>滤镜<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* URL to SVG filter */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">url</span>("<span class="selector-tag">filters</span><span class="selector-class">.svg</span><span class="selector-id">#filter-id</span>");</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;filter-function&gt; values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">blur</span>(5<span class="selector-tag">px</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">brightness</span>(0<span class="selector-class">.4</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(200%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">drop-shadow</span>(16<span class="selector-tag">px</span> 16<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> <span class="selector-tag">blue</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">grayscale</span>(50%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">hue-rotate</span>(90<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">invert</span>(75%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">opacity</span>(25%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">saturate</span>(30%);</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">sepia</span>(60%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Multiple filters */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">contrast</span>(175%) <span class="selector-tag">brightness</span>(3%);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">inherit</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">initial</span>;</span><br><span class="line"><span class="selector-tag">filter</span>: <span class="selector-tag">unset</span>;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;元素选择器&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>程序设计语言基础知识</title>
    <link href="http://yoursite.com/2018/04/12/programming-base/"/>
    <id>http://yoursite.com/2018/04/12/programming-base/</id>
    <published>2018-04-12T06:55:36.000Z</published>
    <updated>2018-04-13T04:04:43.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序设计语言"><a href="#程序设计语言" class="headerlink" title="程序设计语言"></a>程序设计语言</h2><ul><li>Fortran，是第一个被广泛用来进行科学和工程计算的高级语言</li><li>ALGOL，诞生于晶体管计算机流程的年代，有严格的公式化说明</li><li>PASCAL，过程式、结构化的设计语言，曾在高校计算机软件教学中一直处于主导地位</li><li>C</li><li>C++</li><li>C#</li><li>Objective-C</li><li>Java</li><li>Ruby，面向对象、动态类型的脚本语言</li><li>PHP</li><li>Python</li><li>JavaScript</li><li>Delphi，可视化开发工具，在Windows环境下使用</li><li>Visual Basic.NET</li></ul><p>函数式设计语言 人工智能<br>逻辑型程序设计语言PROLOG, 适用于编写自动定理证明</p><p>值调用。若实现函数调用时将实参的值传给相应的形参，则称为传值调用。在这种方式下形参不能向实参传递信息。<br>引用调用。当形式参数为饮用调用类型时，形参名实际上是实参的别名，函数对形参的访问和修改实际上就是针对相应实参的访问和改变。</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><ul><li>词法分析， 源程序可以被简单地看成是一个多行的字符串，这个阶段的任务是队源程序从前到后（从左到右）逐个字符扫描，识别出其中一个个‘单词’符号。</li><li>语法分析，在此法分析的基础上，根据语言的语法规则，将单词符序列分解成各类语法单位，如表达式、语句和程序等。</li><li>语义分析</li><li>中间代码生成</li><li>代码优化</li><li>目标代码生成</li><li>符号管理</li><li>出错管理</li></ul><h2 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h2><p>文法G是一个四元组，G = (N, T, P, S), N是一个非空有限集合，其每个元素称为终结符（无法再推导），T中的每个元素成为非终结符。</p><ul><li>0型语法</li><li>1型语法</li><li>2型语法</li><li>3型语法</li></ul><h2 id="词法"><a href="#词法" class="headerlink" title="词法"></a>词法</h2><ul><li>正规式</li><li>有限自动机</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;程序设计语言&quot;&gt;&lt;a href=&quot;#程序设计语言&quot; class=&quot;headerlink&quot; title=&quot;程序设计语言&quot;&gt;&lt;/a&gt;程序设计语言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Fortran，是第一个被广泛用来进行科学和工程计算的高级语言&lt;/li&gt;
&lt;li&gt;ALGOL，诞
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础知识</title>
    <link href="http://yoursite.com/2018/04/11/computer-system/"/>
    <id>http://yoursite.com/2018/04/11/computer-system/</id>
    <published>2018-04-11T02:00:54.000Z</published>
    <updated>2018-04-12T06:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>计算机的基本硬件系统由运算器、控制器、存储器、输入设备和输出设备5大部件组成</p><p><strong>CPU</strong><br>组成：运算器、控制器、寄存器和内部总线。<br>功能: 指令控制、操作控制、时间控制和数据加工。</p><p>1) 运算器</p><ul><li>算术逻辑单元（ALU）</li><li>累加寄存器（AC）</li><li>数据缓冲寄存器（DR）</li><li>状态条件寄存器（PSW）</li></ul><p>2) 控制器</p><ul><li>指令寄存器（IR），其位数取决于指令的长度。</li><li>程序计数器（PC）</li><li>地址寄存器（AR）</li><li>指令译码器（ID）</li></ul><p>指令控制逻辑、时序控制逻辑、总线控制逻辑、中断逻辑。</p><h2 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h2><p><strong>原码</strong><br>如果机器字长n等于8<br>[+1] = 0 0000001<br>[-1] = 1 0000001<br>[+0.5] = 0.1000000<br>[-0.5] = 1.1000000</p><p><strong>反码</strong><br>原码符号位不变，其它位取反。</p><p><strong>补码</strong><br>反码加1。</p><p><strong>移码</strong><br>将符号为取反的补码。</p><p><strong>浮点数</strong></p><p>工业标准IEEE 754</p><p>(-1)^S <em> 2^E </em> (b0b1b2b3bp-1)</p><p>(-1)^S 阶符<br>S为0是表示正数，S为1时表示负数。<br>E为阶码。<br>(b0b1b2b3bp-1) 为尾数。<br>长度为P。</p><h2 id="校验码"><a href="#校验码" class="headerlink" title="校验码"></a>校验码</h2><p>奇偶校验</p><p>海明码<br>2^k -1 &gt;= n + k<br>k是校验位， n是数据位<br>循环冗余校验码</p><h2 id="计算机体系结构"><a href="#计算机体系结构" class="headerlink" title="计算机体系结构"></a>计算机体系结构</h2><p>Flunn 分类法</p><table><thead><tr><th style="text-align:center">体系结构类型</th><th style="text-align:center">结构</th><th style="text-align:center">关键特性</th><th style="text-align:center">代表</th></tr></thead><tbody><tr><td style="text-align:center">单指令、单数据流（SISD）</td><td style="text-align:center">控制部分：一个；处理器： 一个；主存模块：一个</td><td style="text-align:center"></td><td style="text-align:center">单处理器系统</td></tr><tr><td style="text-align:center">单指令、多数据流（SIMD）</td><td style="text-align:center">控制部分：一个；处理器： 多个；主存模块：多个</td><td style="text-align:center">各处理器以异步执行同一条命令</td><td style="text-align:center">并行处理机 <br> 整列处理机 <br> 超级向量处理机</td></tr><tr><td style="text-align:center">多指令、单数据流（MISD）</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">理论模型，未见成型产品</td></tr><tr><td style="text-align:center">多指令、多数据流（MIMD）</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">多处理机系统 <br> 多计算机</td></tr></tbody></table><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><p>1) CISI（复杂指令集计算机）</p><ul><li>指令集过分复杂</li><li>微程序, 降低了机器的处理速度</li><li>难以优化编译形成高效代码</li><li>强调完善中断控制，导致动作繁多、设计复杂、研制周期长</li><li>设计困难，芯片种类多，出错几率大，成本高</li></ul><p>2) RISC (精简指令集)</p><ul><li>重叠寄存器窗口技术</li><li>优化编译技术</li><li>超流水及超量技术</li><li>硬布线逻辑与微程序集合</li></ul><p><strong>指令的流水处理</strong></p><p>指令的吞吐率p应为最长子过程的倒数。</p><h2 id="存储系统"><a href="#存储系统" class="headerlink" title="存储系统"></a>存储系统</h2><p>层次结构: CPU内部存储器、Cache、主存储器、联机磁盘存储器、脱机光盘磁盘存储器</p><p>按存储器的工作方式分类：</p><ul><li>读/写存储器（RAM）</li><li>只读存储器（ROM）</li></ul><p>操作数指出指令执行的操作所需要数据的来源。操作数是汇编语言指令的一个字段。例如：Mov AX 5678H 操作数（AX 5678H）。在操作数这个字段中可以放操作数本身，也可以放操作地址，还可以放操作地址的计算方法。</p><p>通常一条指令均包含操作符和操作数。例如：在比较指令中操作符指定计算机做比较操作，操作数则指定进行比较的两个数值。</p><p>操作数是指令执行的参与者,也就是各种操作的对象.与之有关的是操作码,所谓操作码是说明计算机要执行哪种,如传送,运算,移位,跳转等操作,它是指令中不可缺少的组成部分。</p><p><strong>寻址方式</strong></p><ul><li><strong>立即寻址方式</strong><br>指令的地址段指出的不是操作数的地址，而是操数本身。这种方式的特点是指令执行时间很短，不需要访问内存操作数。</li><li><strong>直接寻址方式</strong><br>在指令格式的地址字段中直接指出操作书在内存的地址D。采用这种方式，只需要根据地址字段中大的值，即可访问内存读取到操作数。</li><li><strong>间接寻址方式</strong><br>间接寻址的情况下，指令地址中的形式地址不是操作数的真正地址，而是操作数地址的指示器，D单元的内容才是操作数的有效地址。间接寻址方式是早起计算机中经常采用的方式，但由于两次访问内存，影响指令速度，现在已不大使用。</li><li><strong>寄存器寻址方式和寄存器间接寻址方式</strong><br>当操作数不放在内存中，而是放在CPU的通用寄存器中时，可采用寄存器寻方式。此时指令中给出的操作数地址不是内存的地址但愿好，而是通用寄存器的编号。<br>寄存器间接寻址方式与直接寻址方式区别在于：指令格式中的寄存器内容不是操作数，而是操作数的地址，该地址知名的操作数在内存中。</li><li><strong>相对寻址方式</strong></li><li><strong>基址寻址方式</strong></li><li><strong>变址寻址方式</strong></li></ul><p>相关联存储器: 按内容访问的存储器</p><p>高速缓存：速度比一般主存快5～10倍, 对程序员来说是透明的。</p><p>高速缓存中的地址映像方法：<br>在CPU工作时，送出的是主存单元的地址，而应从Cache存储器中读/写信息</p><ul><li>直接映像<br>主存的块与Cache的块的对应关系是固定的</li><li>全相联映像<br>主存与Cache存储器均分成大小相同的块。这种映像方式允许任一块可以调入Canche存储器的任何一个块的空间中。<br>例如， 主存为64MB，Cache为32KB，块的大小为4KB，因此块内地址需要12位，主存需要26位，由于块内地址位12位，所以块号需要14位。</li></ul><p>虚拟存储器</p><p>外部存储器</p><p>廉价冗余磁盘阵列</p><table><thead><tr><th style="text-align:left">RAID级别</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">RAID-0</td><td style="text-align:left">代表了RAID中最高的存储性能， 每个磁盘执行术语它自己的那部分数据请求，不具备容错能力</td></tr><tr><td style="text-align:left">RAID-1</td><td style="text-align:left">采用镜像容错改善可靠性的一种磁盘阵列，最大限度地保证用户数据的可用性和可修复性，数据百分百备份，备份数据占了总存储空间的一半</td></tr><tr><td style="text-align:left">RAID-2</td><td style="text-align:left">采用海明码进行错误检测</td></tr><tr><td style="text-align:left">RAID-3</td><td style="text-align:left">一般只有一个校验盘</td></tr><tr><td style="text-align:left">RAID-4</td><td style="text-align:left">也只有一个校验盘</td></tr><tr><td style="text-align:left">RAID-5</td><td style="text-align:left">不设置校验盘，同一个磁盘既记录数据又负责校验</td></tr><tr><td style="text-align:left">RAID-6</td><td style="text-align:left">采用两级数据冗余和新的数据编码</td></tr></tbody></table><h2 id="输入输出技术"><a href="#输入输出技术" class="headerlink" title="输入输出技术"></a>输入输出技术</h2><ul><li>直接程序控制</li><li><p>中断方式<br>中断处理方法：<br>中断向量表法。中断向量表用来保存各个中断服务程序的入口地址。</p><p>为了实现多级中断嵌套，使用堆栈来保护断电和现场最有效。</p></li><li>直接存储器存取方式（DMA）</li><li>输入输出处理机（IOP）</li></ul><h2 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h2><p>所谓总线（Bus），是计算机设备和设备之间传输信息的公共数据通道。</p><p><strong>总线的分类</strong></p><ul><li>数据总线（DB），用来传送数据信息，是双向的。</li><li>地址总线（AB），用于传送CPU发送的地址信息。</li><li>控制总线（CB），用来传送控制信号，时许信号和状态信息等。</li></ul><p><strong>常见总线</strong></p><ul><li>ISA，工业标准总线，只能支持16位的I/O设备</li><li>EISA</li><li>PCI，内总线，并行传输方式</li><li>PCI Express</li><li>前端总线</li><li>RS-232C，串行外总线</li><li>SCSI，并行外总线</li><li>SATA</li><li>USB，通用串行总线</li><li>IEEE-1394，高速串行外总线</li><li>IEEE-488， 并行总线</li></ul><p><strong>总线复用</strong><br>总线复用，指的是数据和地址在同一个总线上传输的方式。由于CPU引脚数量有限，使得一些引脚起多个作用。采用总线复用方式，可以减少总线中信号线的数量。</p><h2 id="计算机安全"><a href="#计算机安全" class="headerlink" title="计算机安全"></a>计算机安全</h2><h2 id="计算题"><a href="#计算题" class="headerlink" title="计算题"></a>计算题</h2><p>若内存按字节编址，所用的存储器的容量为16K * 8 比特的存储器芯片构成地址编号为B0000H ~ EFFFFH的内存空间，则最少需要多少片</p><p>一、计算出这些地址编号所需的内存空间大小<br>B0000H - EFFFFH + 1 = 40000H<br>转换为二进制为 2^18<br>二、存储器容量位16K X 8 b, 等于 16K ✖ 1 B<br>三、2^18 = 256KB<br>四、256 ➗ 16 = 16</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;硬件&quot;&gt;&lt;a href=&quot;#硬件&quot; class=&quot;headerlink&quot; title=&quot;硬件&quot;&gt;&lt;/a&gt;硬件&lt;/h2&gt;&lt;p&gt;计算机的基本硬件系统由运算器、控制器、存储器、输入设备和输出设备5大部件组成&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CPU&lt;/strong&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>网络与信息安全基础知识</title>
    <link href="http://yoursite.com/2018/04/08/internet/"/>
    <id>http://yoursite.com/2018/04/08/internet/</id>
    <published>2018-04-08T01:44:31.000Z</published>
    <updated>2018-04-09T06:39:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逻辑设计"><a href="#逻辑设计" class="headerlink" title="逻辑设计"></a>逻辑设计</h2><p>任务：<br>根据用户的分类和分部，选择特定的技术，形成特定的网络结构</p><p>过程：</p><ul><li>确定逻辑设计目标</li><li>网络服务评价</li><li>技术选项评价</li><li>技术决策</li></ul><p>工作：</p><ul><li>网络结构的设计</li><li>物理层技术选择</li><li>局域网技术选择与应用</li><li>广域网技术选择与应用</li><li>地址设计和命名模型</li><li>路由选择协议</li><li>网络管理和网络安全</li></ul><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><ul><li>物理层提供建立、维护和拆除物理链路所需的机械、电气、功能和规程特性;</li><li>提供有关在传输介质上非传输结构的位流及物理链路故障检测指示。</li></ul><p><strong>物理层的互连设备</strong></p><p>1) 中继器</p><p>中继器是物理层上面的网络连接设备，适用于完全相同的两类网络互连，主要功能是通过对数据信号的接受、放大、整形与转发，来扩大网络的传输距离。</p><p>2) 集线器</p><p>集线器也是物理层的网络连接设备，可以说集线器是一个多端口的中继器，其主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上，连接到一个集线器的所有节点共享一个冲突域。</p><h2 id="局域网协议"><a href="#局域网协议" class="headerlink" title="局域网协议"></a>局域网协议</h2><p>LAC = 物理层 + MAC（介质访问控制层） + LLC（逻辑链路控制层）</p><p>CSMA/CD 介质访问协议</p><p>IEEE 802.3 —— 10Mbps以太网 同轴电缆</p><p>IEEE 802.3u —— 100Mbps快速以太网 分屏蔽双绞线</p><p>IEEE 802.3z —— 1000Mbps千兆以太网</p><p>IEEE 802.5 —— 令牌环网 </p><p>FDDI 光纤分布式数据接口 （单模光纤、多摸光纤）</p><h2 id="广域网协议"><a href="#广域网协议" class="headerlink" title="广域网协议"></a>广域网协议</h2><p>点对电协议(PPP)  </p><p>数字用户线(xDSL): ADSL(非对称用户数据线)…</p><p>数字专线(DDN)</p><p>帧中继（FR）</p><p>异步传输模式（ATM）</p><p>X.25  </p><h2 id="TCP-IP协议族"><a href="#TCP-IP协议族" class="headerlink" title="TCP/IP协议族"></a>TCP/IP协议族</h2><p>应用层，表示层，会话层： 文件传输协议（FTP）远程登陆协议(telnet) 电子邮件协议(SMTP) 网络文件服务协议(NFS)  网络管理协议(SNMP)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;逻辑设计&quot;&gt;&lt;a href=&quot;#逻辑设计&quot; class=&quot;headerlink&quot; title=&quot;逻辑设计&quot;&gt;&lt;/a&gt;逻辑设计&lt;/h2&gt;&lt;p&gt;任务：&lt;br&gt;根据用户的分类和分部，选择特定的技术，形成特定的网络结构&lt;/p&gt;
&lt;p&gt;过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确定
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="http://yoursite.com/2018/04/03/database/"/>
    <id>http://yoursite.com/2018/04/03/database/</id>
    <published>2018-04-03T07:19:22.000Z</published>
    <updated>2018-04-08T01:42:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DBMS"><a href="#DBMS" class="headerlink" title="DBMS"></a>DBMS</h2><p><strong>数据库管理系统的功能（DBMS）</strong></p><ul><li>数据定义</li><li>数据库操作</li><li>数据库运行管理</li><li>数据的组织、存储和管理</li><li>数据库的建立和维护</li><li>其它功能</li></ul><p><strong>DBMS的特征</strong></p><ul><li>数据结构且统一管理</li><li>有较高的数据独立性</li><li>数据控制功能（数据库的安安性、数据的完整性、并发控制、故障恢复）</li></ul><p><strong>DBMS的分类</strong></p><ul><li>关系型数据库(RDBS)</li><li>面向对象的数据库系统(OODBS)</li><li>对象关系数据库系统(ORDBS)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DBMS&quot;&gt;&lt;a href=&quot;#DBMS&quot; class=&quot;headerlink&quot; title=&quot;DBMS&quot;&gt;&lt;/a&gt;DBMS&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;数据库管理系统的功能（DBMS）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据定义&lt;/li&gt;
&lt;li&gt;数
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>算法设计与分析</title>
    <link href="http://yoursite.com/2018/04/02/arithmetic/"/>
    <id>http://yoursite.com/2018/04/02/arithmetic/</id>
    <published>2018-04-02T02:24:14.000Z</published>
    <updated>2018-04-02T02:32:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="渐进符号"><a href="#渐进符号" class="headerlink" title="渐进符号"></a>渐进符号</h3><ul><li>渐进上界</li><li>渐进下界</li><li>渐进紧致界</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h2&gt;&lt;h3 id=&quot;渐进符号&quot;&gt;&lt;a href=&quot;#渐进符号&quot; class=&quot;headerlink&quot; title=&quot;渐进符号&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>面向对象(设计模式)</title>
    <link href="http://yoursite.com/2018/03/29/object-oriented/"/>
    <id>http://yoursite.com/2018/03/29/object-oriented/</id>
    <published>2018-03-29T07:16:10.000Z</published>
    <updated>2018-04-10T03:08:43.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><p>面向对象的基本概念：</p><ul><li>对象</li><li>消息</li><li>类</li><li>继承</li><li>多态</li><li>动态绑定</li></ul><p>面向对象分析（OOA）包含5个活动：</p><ul><li>认定对象</li><li>组织对象</li><li>对象的相互作用</li><li>基于对象的操作</li><li>定义对象的内部信息</li></ul><p>面向对象设计（OOD）<br>遵循抽象、信息隐蔽、功能独立、模块化等设计原则。<br>1.面向对象设计的活动：</p><ul><li>识别类及对象</li><li>定义属性</li><li>定义服务</li><li>识别关系</li><li>识别包</li></ul><p>2.面向对象的设计的原则</p><ul><li>单一责任原则</li><li>开放-封闭原则</li><li>依赖倒置原则</li><li>接口分离原则</li><li>重用发布等价原则</li><li>共同封闭原则</li><li>共同重用原则</li><li>无环以来原则</li><li>稳定依赖原则</li><li>稳定抽象原则</li></ul><h2 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">production</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">clothes</span> <span class="keyword">implements</span>  <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">production</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"clothes"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">toursers</span> <span class="keyword">implements</span>  <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">production</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"toursers"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="function">Product <span class="title">FactoryMethod</span><span class="params">(String produtType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreleCreator</span> <span class="keyword">implements</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">FactoryMethod</span><span class="params">(String produtType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (produtType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (produtType.equalsIgnoreCase(<span class="string">"CLOTHES"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> clothes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (produtType.equalsIgnoreCase(<span class="string">"TOURSERS"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> toursers();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Product product = <span class="keyword">new</span> ConcreleCreator().FactoryMethod(<span class="string">"CLOTHES"</span>);</span><br><span class="line">        product.production();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工厂模式（反射）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    &lt;T extends Product&gt; <span class="function">T  <span class="title">FactoryMethod</span><span class="params">(Class&lt;T&gt; produtType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreleCreator</span> <span class="keyword">implements</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span>  &lt;T extends Product&gt; <span class="function">T <span class="title">FactoryMethod</span><span class="params">(Class&lt;T&gt; produtType)</span> </span>&#123;</span><br><span class="line">        T result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = (T) Class.forName(produtType.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clothes clothes = <span class="keyword">new</span> ConcreleCreator().FactoryMethod(Clothes.class);</span><br><span class="line">        clothes.production();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品A</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstructProductA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">product</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA1</span> <span class="keyword">implements</span> <span class="title">AbstructProductA</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductA1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品A2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductA2</span>  <span class="keyword">implements</span> <span class="title">AbstructProductA</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductA2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象产品B</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">AbstructProductB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">product</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB1</span> <span class="keyword">implements</span> <span class="title">AbstructProductB</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductB1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品B2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductB2</span>  <span class="keyword">implements</span> <span class="title">AbstructProductB</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">product</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ProductB2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstructProductA <span class="title">createProductA</span><span class="params">(String productName)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> AbstructProductB <span class="title">createProductB</span><span class="params">(String productName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductAFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstructProductA <span class="title">createProductA</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (productName.equalsIgnoreCase(<span class="string">"ProductA1"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (productName.equalsIgnoreCase(<span class="string">"ProductA2"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductA2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstructProductB <span class="title">createProductB</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductBFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstructProductA <span class="title">createProductA</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AbstructProductB <span class="title">createProductB</span><span class="params">(String productName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (productName == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (productName.equalsIgnoreCase(<span class="string">"ProductB1"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB1();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (productName.equalsIgnoreCase(<span class="string">"ProductB2"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ProductB2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ProductAFactory().createProductA(<span class="string">"ProductA1"</span>).product();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Singleton"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton object= Singleton.getInstance();</span><br><span class="line">        object.singletonOperation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器模式"><a href="#生成器模式" class="headerlink" title="生成器模式"></a>生成器模式</h3><p>用简单对象创建复杂对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span>  <span class="title">MyBuidler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildPart</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyProduct</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">productOperation</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder</span> <span class="keyword">implements</span> <span class="title">MyBuidler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Product resultProduct;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> resultProduct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> MyBuidler builder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Director</span><span class="params">(MyBuidler builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        builder.buildPart();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> <span class="keyword">implements</span>  <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">protected</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span>  <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Object clone = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clone = <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        type = <span class="string">"Rectangle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Rectangle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        type = <span class="string">"Circle"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">"Circle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShapeProtoType</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String, Shape&gt; shapeMap = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title">getShape</span><span class="params">(String shapeId)</span> </span>&#123;</span><br><span class="line">        Shape cachedShape = shapeMap.get(shapeId);</span><br><span class="line">        <span class="keyword">return</span> (Shape) cachedShape.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Circle circle = <span class="keyword">new</span> Circle();</span><br><span class="line">        circle.setId(<span class="string">"1"</span>);</span><br><span class="line">        shapeMap.put(circle.getId(), circle);</span><br><span class="line"></span><br><span class="line">        Rectangle rectangle = <span class="keyword">new</span> Rectangle();</span><br><span class="line">        rectangle.setId(<span class="string">"2"</span>);</span><br><span class="line">        shapeMap.put(rectangle.getId(), rectangle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeModal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ShapeProtoType.loadCache();</span><br><span class="line">        ShapeProtoType.getShape(<span class="string">"1"</span>).draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;面向对象基础&quot;&gt;&lt;a href=&quot;#面向对象基础&quot; class=&quot;headerlink&quot; title=&quot;面向对象基础&quot;&gt;&lt;/a&gt;面向对象基础&lt;/h2&gt;&lt;p&gt;面向对象的基本概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;消息&lt;/li&gt;
&lt;li&gt;类&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>结构化开发方法</title>
    <link href="http://yoursite.com/2018/03/29/structured-devMethod/"/>
    <id>http://yoursite.com/2018/03/29/structured-devMethod/</id>
    <published>2018-03-29T02:38:10.000Z</published>
    <updated>2018-03-29T02:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>无直接耦合</li><li>数据耦合</li><li>标记耦合</li><li>控制耦合</li><li>外部耦合</li><li>公共耦合</li><li>内部耦合</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;无直接耦合&lt;/li&gt;
&lt;li&gt;数据耦合&lt;/li&gt;
&lt;li&gt;标记耦合&lt;/li&gt;
&lt;li&gt;控制耦合&lt;/li&gt;
&lt;li&gt;外部耦合&lt;/li&gt;
&lt;li&gt;公共耦合&lt;/li&gt;
&lt;li&gt;内部耦合&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>软件工程</title>
    <link href="http://yoursite.com/2018/03/27/software-engineering/"/>
    <id>http://yoursite.com/2018/03/27/software-engineering/</id>
    <published>2018-03-27T08:40:55.000Z</published>
    <updated>2018-03-29T07:16:23.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件工程概述"><a href="#软件工程概述" class="headerlink" title="软件工程概述"></a>软件工程概述</h2><h3 id="软件工程基本原理"><a href="#软件工程基本原理" class="headerlink" title="软件工程基本原理"></a>软件工程基本原理</h3><ul><li>用分阶段的生命周期计划严格管理</li><li>坚持进行阶段评审</li><li>实现严格的产品控制</li><li>采用现代程序设计技术</li><li>结构应能清楚审查</li><li>开发小组人员应少而精</li><li>承认不断改进软件工程时间的必要性</li></ul><h3 id="软件生存周期"><a href="#软件生存周期" class="headerlink" title="软件生存周期"></a>软件生存周期</h3><ul><li>可行性分析与项目开发计划</li><li>需求分析</li><li>概要设计</li><li>详细设计</li><li>编码</li><li>测试</li><li>维护</li></ul><h3 id="软件过程"><a href="#软件过程" class="headerlink" title="软件过程"></a>软件过程</h3><p><strong>能力成熟度模型(CMM):</strong></p><ul><li><strong>初始级（Initial）</strong>杂乱无章，甚至很混乱，几乎没有明确定义的步骤，项目的成功完全依赖个人的努力和英雄式的核心人物的作用。</li><li><strong>可重复级（Repeatable）</strong>可跟踪项目费用、进度和功能特性，有必要的过程准则来重复以前在同类项目中的成功。</li><li><strong>已定义级（Defined）</strong> 软件过程已经文档化，标准化，并综合成整个软件开发组织的标准软件过程。所有软件项目都采用根据实际情况修改后得到的标准软件过程来开发和维护软件。</li><li><strong>已管理级（Managed）</strong>制定了软件过程和产品质量的详细度量标准。软件过程的铲平质量都被开发组织的成员理解和控制。</li><li><strong>优化级（Optimized）</strong>加强了定量分析，通过来自过程的反馈和来自观念、新技术的反馈使过程不断持续地改进</li></ul><hr><h2 id="软件过程模型"><a href="#软件过程模型" class="headerlink" title="软件过程模型"></a>软件过程模型</h2><h3 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h3><p>以文档驱动的，适合软件开发过程很明确的软件项目的模型。</p><h3 id="增量模型"><a href="#增量模型" class="headerlink" title="增量模型"></a>增量模型</h3><p>优点：</p><ul><li>第一个可交付版本所需要的成本和时间很少。</li><li>开发由增量表示的小系统所承担的风险不大。</li><li>由于很快发布了第一个版本，因此可以减少用户的需求变更。</li><li>运行增量投资，即在项目开始时，可以仅对一个或两个增量投资。</li></ul><p>缺点：</p><ul><li>如果没有对用户的变更要求进行规划，你吧么产生的初始增量可能会造成后来增量的不稳定。</li><li>如果需求不像早期思考的那样稳定和完整，那么一些增量就可能需要重新开发，重新发布。</li><li>管理发生的成本、进度和配置的复杂性可能会超出组织的能力。</li></ul><h3 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h3><p>原型方法比较适合于用户需求不清、需求经常变化的情况。当系统规模不是很大也不太复杂时，采用该方法。</p><h3 id="螺旋模型"><a href="#螺旋模型" class="headerlink" title="螺旋模型"></a>螺旋模型</h3><p>结合了瀑布模型和演化模型，分为如下4个工作步骤：</p><ul><li>制定计划。</li><li>风险分析。</li><li>实施工程。</li><li>用户评估。</li></ul><p>螺旋模型强调风险分析，适用于庞大，复杂且具有高风险的系统。</p><h3 id="喷泉模型"><a href="#喷泉模型" class="headerlink" title="喷泉模型"></a>喷泉模型</h3><p>是一种以用户需求为动力，已对象作为驱动的模型，适合于面向对象的开发方法，具有迭代性和无间隙性。<br>优点：</p><ul><li>各个阶段没有明显的界限，开发人员可以同步进行，提高软件的开发效率，节省时间。</li></ul><p>缺点：</p><ul><li>各个开发阶段是重叠的，在开发过程中需要大量的开发人员，不利于项目管理。</li><li>要求严格管理文档，使得审核的难度加大。</li></ul><h3 id="基于构建的开发模型"><a href="#基于构建的开发模型" class="headerlink" title="基于构建的开发模型"></a>基于构建的开发模型</h3><p>具有多螺旋模型的特点，它本质上是演化模型，需要以迭代的方式构建软件。其不同之处在于基于构建的开发模型采用预先打包的软件构建开发应用系统。</p><h3 id="统一过程（UP）模型"><a href="#统一过程（UP）模型" class="headerlink" title="统一过程（UP）模型"></a>统一过程（UP）模型</h3><p>是一种“用例和风险驱动，以架构为中心，迭代并且增量”的开发过程，由UML方法和工具支持。</p><p>4个技术阶段：</p><ul><li>起始阶段。</li><li>精化阶段。</li><li>构建阶段。</li><li>移交阶段。</li></ul><h3 id="敏捷方法"><a href="#敏捷方法" class="headerlink" title="敏捷方法"></a>敏捷方法</h3><ul><li>极限编程（XP）<br>四大价值观：沟通、简单性、反馈和勇气。<br>5个原则：快速反馈、简单性假设、逐步修改、提倡更改和优质工作。</li><li>水晶法（Crystal）</li><li>并列争求法（Scrum）</li><li>自适应软件开发（ASD）</li></ul><hr><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="软件需求"><a href="#软件需求" class="headerlink" title="软件需求"></a>软件需求</h3><ul><li>功能需求。（要做什么，何时做在何时一级如何修改或升级）</li><li>性能需求。（存储容量限制、执行速度、响应时间及吞吐量）</li><li>用户或人的因素。（用户使用计算机的熟练程度，用户错误操作的可能性）</li><li>环境需求。（外设、接口、地点、分布、湿度、磁场、系统、网络、数据库）</li><li>界面需求。</li><li>文档需求。</li><li>数据需求。（输入输出数据的格式、接受发送数据的频率、数据的准确性和精度）</li><li>资源使用需求。</li><li>安全保密要求。</li><li>可靠性要求。</li><li>软件陈本消耗和开发进度。</li><li>其它非功能性需求。（开发模式、维护性、验收标准…）</li></ul><h3 id="软件需求说明书"><a href="#软件需求说明书" class="headerlink" title="软件需求说明书"></a>软件需求说明书</h3><ul><li>数据描述</li><li>数据流图</li><li>数据字典描述</li><li>胸接口描述</li><li>内部接口说明</li><li>系统的功能描述</li><li>处理说明</li><li>系统设计的限制</li><li>系统的性能描述</li><li>性能参数</li><li>对系统进行测试的种类</li></ul><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><p>怎么做？</p><h3 id="概要设计"><a href="#概要设计" class="headerlink" title="概要设计"></a>概要设计</h3><ul><li>设计软件系统总体结构</li><li>数据结构及数据库设计</li><li>编写该要设计文档</li><li>评审</li></ul><h3 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h3><ul><li>算法设计</li><li>模块内的数据结构设计</li><li>数据库物理机构设计</li><li>其它设计</li><li>评审</li></ul><hr><h2 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h2><h3 id="系统测试的目的"><a href="#系统测试的目的" class="headerlink" title="系统测试的目的"></a>系统测试的目的</h3><p>系统测试是为了发现错误而执行程序的过程。</p><h3 id="系统测试的基本原则"><a href="#系统测试的基本原则" class="headerlink" title="系统测试的基本原则"></a>系统测试的基本原则</h3><ul><li>应尽早并不断地进行测试。</li><li>测试工作应该避免由原软件的人或小组承担。</li><li>要根据系统功能确定预期输出结果。</li><li>既要包含有效、合理的输入条件，也要包含不合理、失效的输入条件</li><li>在测试程序时，不仅要检验程序员是否做了该做的事，还要检验程序是否做了不该做的事</li><li>严格按照测试计划进行</li><li>妥善保存测试计划，测试用例</li><li>测试例子都是精心设计出来的，可以为重新测试或追加测试提供方便</li></ul><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>也成模块测试，侧重于模块中的内部处理逻辑和数据结构。</p><p>测试内容：</p><ul><li>模块接口</li><li>局部数据结构</li><li>重要的执行路径</li><li>出错处理</li><li>边界条件</li></ul><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><p>把模块按系统设计说明书的要求组合起来进行测试。</p><ul><li>自顶向下的集成测试</li><li>自底向上的集成测试</li><li>回归测试</li><li>冒烟测试</li></ul><h3 id="确认测试"><a href="#确认测试" class="headerlink" title="确认测试"></a>确认测试</h3><p>确认测试始于集成测试的结束，那是就已经测试完单个构建。</p><h3 id="系统测试-1"><a href="#系统测试-1" class="headerlink" title="系统测试"></a>系统测试</h3><p>各种集成测试和确认测试。</p><h3 id="测试web应用"><a href="#测试web应用" class="headerlink" title="测试web应用"></a>测试web应用</h3><p><strong>质量维度</strong></p><ul><li>内容</li><li>功能</li><li>结构</li><li>可用性</li><li>导航性</li><li>性能</li><li>兼容性</li><li>安全性</li></ul><h3 id="黑盒测试"><a href="#黑盒测试" class="headerlink" title="黑盒测试"></a>黑盒测试</h3><ul><li>等价类划分</li><li>边界值分析</li><li>错误推测</li><li>因果图</li></ul><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><ul><li>语句覆盖（SC）<br>被测程序的每个语句至少执行一次。</li><li>判定覆盖 （DC）<br>每个判定的每种结果至少执行一次</li><li>条件覆盖 （CC）<br>每个条件的结果至少执行一次</li><li>判定/条件覆盖（CDC）<br>同时满足判定覆盖和条件覆盖</li><li>条件组合覆盖（MCC）<br>判定中所有可能的条件组合</li><li>路径覆盖</li></ul><h3 id="调试方法"><a href="#调试方法" class="headerlink" title="调试方法"></a>调试方法</h3><ul><li>试探法</li><li>回溯法</li><li>对分查找法</li><li>归纳法</li><li>演绎法</li></ul><hr><h2 id="运行和维护知识"><a href="#运行和维护知识" class="headerlink" title="运行和维护知识"></a>运行和维护知识</h2><h3 id="系统转换"><a href="#系统转换" class="headerlink" title="系统转换"></a>系统转换</h3><ul><li>直接转换</li><li>并行转换</li><li>分段转换</li></ul><h3 id="系统可维护性的评价指标"><a href="#系统可维护性的评价指标" class="headerlink" title="系统可维护性的评价指标"></a>系统可维护性的评价指标</h3><ul><li>可理解性</li><li>可测试性</li><li>可修改性</li></ul><h3 id="软件维护"><a href="#软件维护" class="headerlink" title="软件维护"></a>软件维护</h3><ul><li>正确性维护</li><li>适应性维护</li><li>完善性维护</li><li>预防性维护</li></ul><h3 id="系统评价"><a href="#系统评价" class="headerlink" title="系统评价"></a>系统评价</h3><ul><li>立项评价</li><li>中期评价</li><li>结束评价</li></ul><h2 id="软件项目管理"><a href="#软件项目管理" class="headerlink" title="软件项目管理"></a>软件项目管理</h2><h3 id="软件项目管理设计的范围"><a href="#软件项目管理设计的范围" class="headerlink" title="软件项目管理设计的范围"></a>软件项目管理设计的范围</h3><p><strong>1、人员</strong></p><ul><li>项目管理人员（项目经理）</li><li>高级管理人员</li><li>开发人员</li><li>客户</li><li>最终用户</li></ul><p><strong>2、产品（软件环境）</strong></p><ul><li>项目环境</li><li>信息目标</li><li>功能和性能</li></ul><p><strong>3、过程</strong><br>选择过程模型</p><p><strong>4、项目</strong></p><ul><li>明确目标及过程</li><li>保持动力</li><li>跟踪进展</li><li>作出明智的决策</li><li>进行时候分析</li></ul><h3 id="软件项目估算"><a href="#软件项目估算" class="headerlink" title="软件项目估算"></a>软件项目估算</h3><p><strong>COCOMO估算模型</strong><br>基本COCOMO模型<br>E = a(L)^b<br>D = cE^d<br>E表示工作量，单位时人月；D表示开发时间，单位是月；L是项目的源代码估计值，单位是千行；a、b、c、d是常数</p><p>中级COCOMO模型<br>E = a(L^b)EAF<br>EAF是工作量调节因子</p><p><strong>Putnam估算模型</strong></p><h3 id="进度管理"><a href="#进度管理" class="headerlink" title="进度管理"></a>进度管理</h3><p>进度管理的基本原则：</p><ul><li>划分</li><li>相互依赖性</li><li>时间分配</li><li>工作量确认</li><li>确定责任</li><li>明确输出结果</li><li>确定里程碑</li></ul><p>进度安排：<br>Gantt图<br>PERT图</p><hr><h2 id="软件质量"><a href="#软件质量" class="headerlink" title="软件质量"></a>软件质量</h2><p>由质量保证、质量规划和质量控制三部分组成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件工程概述&quot;&gt;&lt;a href=&quot;#软件工程概述&quot; class=&quot;headerlink&quot; title=&quot;软件工程概述&quot;&gt;&lt;/a&gt;软件工程概述&lt;/h2&gt;&lt;h3 id=&quot;软件工程基本原理&quot;&gt;&lt;a href=&quot;#软件工程基本原理&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>操作系统知识</title>
    <link href="http://yoursite.com/2018/03/26/operating-system/"/>
    <id>http://yoursite.com/2018/03/26/operating-system/</id>
    <published>2018-03-26T06:24:55.000Z</published>
    <updated>2018-04-19T05:20:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h2><h3 id="操作系统的基本概念"><a href="#操作系统的基本概念" class="headerlink" title="操作系统的基本概念"></a>操作系统的基本概念</h3><p>操作系统的4个特征：<strong>并发行</strong>、<strong>共享性</strong>、<strong>虚拟性</strong>和<strong>不确定性</strong>。</p><p>操作系统功能的5大部分：<strong>进程管理</strong>、<strong>文件管理</strong>、<strong>存储管理</strong>、<strong>设备管理</strong>和<strong>作业管理</strong>。</p><h3 id="操作系统的分类及特点"><a href="#操作系统的分类及特点" class="headerlink" title="操作系统的分类及特点"></a>操作系统的分类及特点</h3><p><strong>1. 批处理操作系统</strong></p><p>单道批处理：一次只有一个作业装入内存执行，作业由用户程序、数据和作业说明书（作业控制用语言）3个部分组成。</p><p>多道批处理：多道、宏观上并行运行、微观上串行运行。</p><p><strong>2.分时操作系统</strong></p><p>特点：多路性、独立性、交互性和及时性。</p><p><strong>3.实时操作系统</strong></p><p><strong>4.网络操作系统</strong></p><p><strong>6.分布式操作系统</strong></p><p><strong>7.嵌入式操作系统</strong></p><p>微型化、可定制、实时性、可靠性、易移植性。</p><p>多到程序技术是值计算机内存中同时存放几道相互独立的程序，使他们在管理程序控制之下，相互穿插运行。多道程序的运行特征：<br>多道， 宏观上并行运行，微观上串行运行。</p><hr><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><p><strong>PV操作</strong></p><p><strong>进程调度</strong></p><ul><li>先来先服务</li><li>时间片乱转</li><li>优先级调度</li><li>多级反馈调度</li></ul><p><strong>死锁</strong><br>死锁产生的4个必要条件：互斥条件、请求保持条件、不可剥夺条件和环路条件</p><p>死锁预防： 预先静态分配法，资源有序分配法</p><p>死锁避免：银行家算法</p><p>死锁解除：资源剥夺法、撤销进程法</p><hr><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><p>存储管理的主要功能包括主存空间的分配和回收、提高主存的利用率、扩充主存、对主存信息实现有效保护。</p><p>分区存储管理分为固定分区和可变分区。</p><p>对于可变分区，主要有如下4种算法:</p><ul><li>最佳适应算法</li><li>最差适应算法</li><li>首次适应算法</li><li>循环首次适应算法</li></ul><h3 id="地址重定位"><a href="#地址重定位" class="headerlink" title="地址重定位"></a>地址重定位</h3><p>地址重定位是指将逻辑地址转换为物理地址的过程。分为<strong>静态重定位</strong>和<strong>动态重定位</strong>。</p><h3 id="存储管理方案"><a href="#存储管理方案" class="headerlink" title="存储管理方案"></a>存储管理方案</h3><p><strong>连续分区</strong><br>把所有的用户区都分配给唯一用户，当作业被调度时，进程全部进入内存，一旦完成，所有主存恢复空闲，因此它不适合多道程序设计。</p><p><strong>固定分区</strong><br>容易产生碎片</p><p><strong>可重定位分区存储管理</strong><br>可以克服固定分区的碎片问题。单花费大量时间和系统资源。</p><p><strong>分页存储管理</strong></p><p>分页地址结构： 页号 + 页内地址</p><p>若页的大小为2K，则可推断出页内地址有11位，反之亦然。</p><p><strong>分段存储管理</strong><br>分段的地址结构：段号 + 段内地址</p><p><strong>段页式存储管理</strong><br>支持虚拟存储</p><h3 id="虚拟存储管理"><a href="#虚拟存储管理" class="headerlink" title="虚拟存储管理"></a>虚拟存储管理</h3><p><strong>请求分页管理</strong></p><p><strong>页面置换算法（重点）：</strong>最佳置换算法、先进先出（FIFO）置换算法、最近最少未使用（LRU）置换算法</p><hr><h2 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h2><p>管理对象：实际I/O操作的设备（如键盘、鼠标、打印机等）、设备控制器、DMA控制器、中断控制器、I/O处理机（通道）等。</p><p>管理目标：如何提高设备的利用率，为用户提供方便、统一的界面。</p><p>主要技术：中断技术、DMA技术、通道技术和缓冲技术。</p><p>主要任务：保证在多道程序环境下，当多个进程竞争使用设备时，按一定的策略分配和管理各种设备，控制设备的各种操作，完成I/O设备与主存之间的数据交换。</p><p>主要功能：动态地掌握并记录设备的状态、设备的分配和释放、缓冲区管理、实现物理I/O设备的操作、提供设备使用的用户接口及设备的访问和控制。</p><h3 id="设备管理采用的相关技术"><a href="#设备管理采用的相关技术" class="headerlink" title="设备管理采用的相关技术"></a>设备管理采用的相关技术</h3><p>通道技术、DMA技术、缓冲技术、Spooling技术。</p><h3 id="磁盘调度"><a href="#磁盘调度" class="headerlink" title="磁盘调度"></a>磁盘调度</h3><p>磁盘调度的目标是使进程对磁盘的平均寻道时间最短。</p><p><strong>1、磁盘驱动调度</strong></p><p>1）先来先服务（FCFS）算法：它按照输入输出请求到达的顺序，逐一完成访问请求，它只考虑请求访问者的先后顺序，而不考虑它们要访问的物理位置。</p><p>2）最短查找时间优先（SSTF）算法： 先对最靠近当前柱面位置的请求进行服务，即先对寻找时间最短的请求进行服务。</p><p>3）SCAN算法</p><p>4）C-SCAN算法：与SCAN算法相似，但达到另一端时，会马上折回磁盘的开始端。</p><p><strong>2、旋转调度算法</strong></p><p>旋转调度应该考虑如下情况：</p><ol><li>进程请求的是同一磁道上不同编号的扇区。</li><li>进程请求访问的是不同磁道上不同编号的扇区。</li><li>进程请求访问的是不同磁道上具有相同编号的扇区。</li></ol><hr><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>文件系统的功能：按名存取、统一的用户接口、并发和访问控制、安全性控制、优化性能、差错恢复。</p><h3 id="文件的结构和组织"><a href="#文件的结构和组织" class="headerlink" title="文件的结构和组织"></a>文件的结构和组织</h3><p><strong>1、文件的逻辑结构：</strong></p><ol><li>有结构的纪录式文件：定长记录和变长记录。</li><li>无机构的流式文件。</li></ol><p><strong>2、文件的物理结构：</strong></p><ol><li>连续结构。</li><li>链接结构。</li><li>索引结构。</li><li>多个物理块的索引表。</li></ol><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><p>文件控制块（FCB）的有序集合称为文件目录</p><p><strong>1、文件控制块</strong></p><ul><li>基本信息类（文件名、问价你的无力地址、文件长度和文件块数）</li><li>存取控制信息类（文件的存取权限。。）</li><li>使用信息类（文件简历日期，最后一次修改日期）</li></ul><p><strong>2、文件存储空间的管理</strong></p><ul><li>空闲区表。</li><li>位示图。</li><li>空闲块链。</li><li>成组连接法。</li></ul><hr><h2 id="作业管理"><a href="#作业管理" class="headerlink" title="作业管理"></a>作业管理</h2><h3 id="作业调度算法"><a href="#作业调度算法" class="headerlink" title="作业调度算法"></a>作业调度算法</h3><ul><li>先来先服务</li><li>短作业优先</li><li>响应比高优先</li><li>优先级调度算法</li><li>均衡调度算法</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;操作系统概述&quot;&gt;&lt;a href=&quot;#操作系统概述&quot; class=&quot;headerlink&quot; title=&quot;操作系统概述&quot;&gt;&lt;/a&gt;操作系统概述&lt;/h2&gt;&lt;h3 id=&quot;操作系统的基本概念&quot;&gt;&lt;a href=&quot;#操作系统的基本概念&quot; class=&quot;headerlink
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://yoursite.com/2018/03/22/data-struct/"/>
    <id>http://yoursite.com/2018/03/22/data-struct/</id>
    <published>2018-03-22T01:35:48.000Z</published>
    <updated>2018-04-18T00:49:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表插入一个元素，需要移动的元素个数的期望值为 n/2，删除一个元素的期望值为(n-1)/2。</p><p>链表节点类型定义：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;NODE, *LinkList</span><br></pre></td></tr></table></figure></p><p>单链表中，p节点后插入s<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = s;</span><br></pre></td></tr></table></figure></p><p>单链表中，删除p节点的后续节点<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">q = p-&gt;next;</span><br><span class="line">p-&gt;next = q-&gt;next-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(q);</span><br></pre></td></tr></table></figure></p><p>单链表的查找运算<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// k为元素个数</span></span><br><span class="line"><span class="function">LinkList <span class="title">Find_List</span><span class="params">(LinkList L, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    LinkList p;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; i &lt; k) &#123;</span><br><span class="line">        p = p -&gt; next; i++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (p &amp;&amp; i== k) <span class="keyword">return</span> p</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单链表的插入运算<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert_List</span><span class="params">(LinkList L, <span class="keyword">int</span> k, <span class="keyword">int</span> newElem)</span> </span>&#123;</span><br><span class="line">    LinkList p,s</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>) p = L;</span><br><span class="line">    <span class="keyword">else</span> p = Find_List(L, k<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    s = (NODE *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(!s) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    s-&gt;data = newElem;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>双向链表中，在p节点钱插入一个新节点s<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s-&gt;front = p-&gt;front;</span><br><span class="line">p-&gt;front-&gt;next = s;</span><br><span class="line">s-&gt;next = p</span><br><span class="line">p-&gt;front = s</span><br></pre></td></tr></table></figure></p><p>双向链表中，删除一个节点p<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next-&gt;front = p-&gt;front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>较为简单，着重考虑出栈入栈的顺序。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列Q的容量为MAXSIZE, 初始时队列为空，且Q.rear和Q.front等于0。<br>元素入队时，修改队尾指针 Q.rear = ( Q.rear + 1 ) % MAXSIZE<br>元素出队时，修改队头指针 Q.front = ( Q.front + 1 ) % MAXSIZE </p><p>循环队列类型定义<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXQSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> *base;</span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;SqQueue;;</span><br></pre></td></tr></table></figure></p><p>创建一个空的循环队列<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(SqQueue *Q)</span> </span>&#123;</span><br><span class="line">    Q-&gt;base = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(MAXQSIZE*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(!Q-&gt;base) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Q-&gt;front = <span class="number">0</span>; </span><br><span class="line">    Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>元素入循环队列<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(SqQueue *Q, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 判断是否满队列 */</span></span><br><span class="line">    <span class="keyword">if</span>( (Q-&gt;rear+<span class="number">1</span>) % MAZQSIZE == Q-&gt;front ) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Q-&gt;base[Q-&gt;rear] = e;</span><br><span class="line">    Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>元素出循环队列<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DelQueue</span><span class="params">(SqQueue *Q, <span class="keyword">int</span> *e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 判断队列是否为空 */</span></span><br><span class="line">    <span class="keyword">if</span>(Q-&gt;rear == Q-&gt;front) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    *e = Q-&gt;base[Q-&gt;front];</span><br><span class="line">    Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAXQSIZE</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="串"><a href="#串" class="headerlink" title="串"></a>串</h2><p>朴素的模式匹配算法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 查找并返回模式串T在主串S中从pos开始的位置（下标），若T不是S的子串，则返回-1 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index</span><span class="params">(<span class="keyword">char</span> S[], <span class="keyword">char</span> T[], <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, slen, tlen;</span><br><span class="line">    i = pos;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    slen = <span class="built_in">strlen</span>(S);</span><br><span class="line">    tlen = <span class="built_in">strlen</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(i &lt; slen &amp;&amp; j &lt; tlen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (S[i] === T[i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i = i - j + <span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= tlen) <span class="keyword">return</span> i - tlen;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最好的情况下，匹配成功的平均比较次数 (n + m)/ 2，时间复杂度为 O(n + m);<br>最差情况，m ✖️ (n - m + 2) / 2，时间复杂度为 O(n ✖️ m)。</p><p>KMP算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Get_next</span><span class="params">(<span class="keyword">char</span> *p, <span class="keyword">int</span> next[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, slen;</span><br><span class="line">    slen = <span class="built_in">strlen</span>(p);</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    j = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; slen) &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || p[i] == p[j]) &#123;</span><br><span class="line">            ++i;</span><br><span class="line">            ++j;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            j= next[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Index_KMP(<span class="keyword">char</span>* s, <span class="keyword">char</span>* p, <span class="keyword">int</span> pos, <span class="keyword">int</span> next[]) &#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, slen, plen;</span><br><span class="line">    i = pos - <span class="number">1</span>;</span><br><span class="line">    j = <span class="number">-1</span>;</span><br><span class="line">    slen = slen(s);</span><br><span class="line">    plen = slen(p);</span><br><span class="line">    <span class="keyword">while</span>(i &lt; slen &amp;&amp; j &lt; plen) &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || s[i] == p[j]) &#123; ++i; ++j &#125;</span><br><span class="line">        <span class="keyword">else</span> j = next[j]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &gt;= plen) <span class="keyword">return</span> i-plen;</span><br><span class="line">    <span class="keyword">else</span>  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>二维数组：行优先存储，列优先存储</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p><strong>对称矩阵</strong><br>若一个矩阵是对称矩阵，可以将n^2个元素压缩存储到n(n+1)/2的存储空间中。<br>假设以一维数组B[n(n+1)/2]作为n阶堆成矩阵A中元素的存储空间，则 B&#91;k&#93;(1=&lt;k&lt;n(n+1)/2)<br>与下标为ij的举证元素之间存在这一一对应的关系</p><p>i &gt;= 1, j &lt;= n， i &gt;= j<br>k = i(i-1)/2 + j<br>i &lt;= j<br>k = j(j-1)/2 + i</p><p><strong>对角矩阵</strong><br>k = 3(i-1) -1 + j -i +1 + 1 = 2i + j -2;</p><p><strong>稀疏矩阵</strong></p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><strong>二叉树的性质</strong></p><ul><li>二叉树第i层上，最多有2^(i-1)个节点。</li><li>高度位k的二叉树，最多有2^k-1个节点。</li><li>对于任何一颗二叉树，若终端节点个数位a,度为2的节点个数位b，则 a=b+1。</li><li>对于具有n个节点的完全二叉树的深度为floor(logn2^n) + 1。</li></ul><p>二叉链表的节点类型<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTnode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;BiTnode,*Bitree;</span><br></pre></td></tr></table></figure></p><p>二叉树的先序遍历<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(Bitree root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, root-&gt;data);</span><br><span class="line">        preOrder(root-&gt;lchild);</span><br><span class="line">        preOrder(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二叉树的中序遍历<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(Bitree root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        InOrder(root-&gt;lchild);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, root-&gt;data);</span><br><span class="line">        InOrder(root-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二叉树的后序遍历<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrcer</span><span class="params">(Bitree root)</span> </span>&#123;</span><br><span class="line">    PostOrder(root-&gt;lchild);</span><br><span class="line">    PostOrder(root-&gt;rchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>, root-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二叉树的中序非递归遍历算法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InOrderTraverse</span><span class="params">(BiTree root)</span> </span>&#123;</span><br><span class="line">    BiTree p;</span><br><span class="line">    <span class="comment">/* 创建一个空栈 */</span></span><br><span class="line">    InitStack(St);</span><br><span class="line">    p = root;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> || !isEmpty(St))&#123;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            Push(St, p)</span><br><span class="line">            p = p-&gt;lchild;</span><br><span class="line">        &#125; esle &#123;</span><br><span class="line">            <span class="comment">/* 栈顶元素出栈 */</span></span><br><span class="line">            q = Top(St); Pop(St);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, q-&gt;data);</span><br><span class="line">            p = q-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建最优二叉树</p><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><ul><li>有向图</li><li>无向图</li><li>完全图，共有n(n-1)/2条边</li><li>度、出度和入度</li><li>路径</li><li>连通图</li><li>强连通图</li><li>网</li><li>有向树</li></ul><p><strong>图的存储结构</strong><br>邻接链表<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 图中顶点的最大值 */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MaxN 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNonde</span>&#123;</span></span><br><span class="line">    <span class="comment">/* 链接链表的定点序号 */</span></span><br><span class="line">    <span class="keyword">int</span> adjevex;</span><br><span class="line">    <span class="comment">/* 边上的权值 */</span></span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="comment">/* 指向下一个定点的指针 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>* <span class="title">nextarc</span>;</span></span><br><span class="line">&#125;EdgeNode</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> *<span class="title">firstarc</span></span></span><br><span class="line"><span class="class">&#125;<span class="title">AdjList</span>[<span class="title">MaxN</span>];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> zvnum;</span><br><span class="line">    AdjList Vertices;</span><br><span class="line">&#125;Graph</span><br></pre></td></tr></table></figure></p><p>邻接矩阵<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxN 30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> AdjMatrix[MaxN][MaxN]</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="comment">/* 图中顶点数目 */</span></span><br><span class="line">    <span class="keyword">int</span> Vnum;</span><br><span class="line">    adjMatrix Arcs;</span><br><span class="line">&#125;Graph;</span><br></pre></td></tr></table></figure></p><p><strong>图的遍历</strong></p><ul><li><p>DFS，深度优先遍历</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> visited[MaxN] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs</span><span class="params">(Grap G, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    EdgeNode *t;<span class="keyword">int</span> j;</span><br><span class="line">    <span class="comment">/* 访问序号为i的定点 */</span></span><br><span class="line">    prinft(<span class="string">"%d"</span>, i); </span><br><span class="line">    visited[i] = <span class="number">1</span>;</span><br><span class="line">    t = G.Vertices[i].firstarc;</span><br><span class="line">    <span class="keyword">while</span>(t != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        j = t-&gt;adjvex;</span><br><span class="line">        <span class="keyword">if</span>(visited[j] == <span class="number">0</span>)</span><br><span class="line">            Dfs(G,j);</span><br><span class="line">        t = t-&gt;nextarc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>BFS，广度优先遍历</p></li></ul><p><strong>生成树及最小生成树</strong></p><ul><li>普里姆算法(Prim) 算法, O(n^2)</li><li>克鲁斯卡尔算法(Kruskal) 算法, O(eloge)</li></ul><p>AOV, AOE</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>顺序查找，平均查找长度(n+1)/2.</p><p>折半查找, 需要有序排列<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bsearch_rec</span><span class="params">(<span class="keyword">int</span> r[], <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid;</span><br><span class="line">    <span class="keyword">if</span>(low &lt;= high) &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(key == r[mid])</span><br><span class="line">            rerturn mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; r[mid])</span><br><span class="line">            <span class="keyword">return</span> Bsearch_rec(r,low,mid - <span class="number">1</span>, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; r[mid])</span><br><span class="line">            <span class="keyword">return</span> Bsearch_rec(r,mid + <span class="number">1</span>, high, key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二叉排序树采用二叉链表存储<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Tnode</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Tnode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span></span></span><br><span class="line"><span class="class">&#125;<span class="title">BSTnode</span>, *<span class="title">BSTree</span></span></span><br></pre></td></tr></table></figure></p><p>二叉排序树查找算法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BsTree <span class="title">SearchBST</span><span class="params">(BSTree root, <span class="keyword">int</span> key, BSTree *father)</span> </span>&#123;</span><br><span class="line">    BSTree p = root; *father = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;data!=key) &#123;</span><br><span class="line">        *father = p;</span><br><span class="line">        <span class="keyword">if</span>(key &lt; p-&gt;data) p=p-lchild;</span><br><span class="line">        <span class="keyword">else</span> p= p-&gt;rchild</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>平衡二叉树</li><li>B_树</li><li>哈希表（通过增量序列解决冲突）</li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><table><thead><tr><th style="text-align:center">排序算法</th><th style="text-align:center">平均情况</th><th style="text-align:center">最好情况</th><th style="text-align:center">最坏情况</th><th style="text-align:center">空间复杂度</th><th style="text-align:center">稳定性</th></tr></thead><tbody><tr><td style="text-align:center">直接插入排序</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(1)</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">希尔排序</td><td style="text-align:center">O(n^1.3)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(1)</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">简单选择排序</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(1)</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">O(1)</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n2)</td><td style="text-align:center">O(1)</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">O(nlog2 n)</td><td style="text-align:center">O(1)</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">基数排序</td><td style="text-align:center">O(d(r+n))</td><td style="text-align:center">O(d(n+rd))</td><td style="text-align:center">O(d(r+n))</td><td style="text-align:center">O(rd+n)</td><td style="text-align:center">稳定</td></tr></tbody></table><p><strong>直接插入排序</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insertsort</span> <span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(data[i] &lt; data[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            tmp = data[i];</span><br><span class="line">            data[i] = data[i <span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span> &amp;&amp; data[j] &gt; tmp; j--) data[j+<span class="number">1</span>] = data[j];</span><br><span class="line">            data[j + <span class="number">1</span>] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>希尔排序</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">**简单选择排序**</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, tmp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n <span class="number">-1</span>; i++) &#123;</span><br><span class="line">        k = i;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>;j &lt; n;j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[j] &lt; data[k]) k = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k != i) &#123;</span><br><span class="line">            tmp = data[i]; data[i] = data[k]; data[k] = tmp</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速排序</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partiton</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i, j, pivot;</span><br><span class="line">  pivot = data[low];</span><br><span class="line">  i = low;</span><br><span class="line">  j = high;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; data[j] &gt;= pivot)</span><br><span class="line">      j--;</span><br><span class="line">    data[i] = data[j];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; data[i] &lt;= pivot)</span><br><span class="line">      i++;</span><br><span class="line">    data[j] = data[i];</span><br><span class="line">  &#125;</span><br><span class="line">  data[i] = pivot;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (low &lt; high)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">int</span> loc = partiton(data, low, high);</span><br><span class="line">    quickSort(data, low, loc - <span class="number">1</span>);</span><br><span class="line">    quickSort(data, loc + <span class="number">1</span>, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线性表&quot;&gt;&lt;a href=&quot;#线性表&quot; class=&quot;headerlink&quot; title=&quot;线性表&quot;&gt;&lt;/a&gt;线性表&lt;/h2&gt;&lt;p&gt;线性表插入一个元素，需要移动的元素个数的期望值为 n/2，删除一个元素的期望值为(n-1)/2。&lt;/p&gt;
&lt;p&gt;链表节点类型定义：&lt;
      
    
    </summary>
    
    
      <category term="理论" scheme="http://yoursite.com/tags/%E7%90%86%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>js日期库moment.js</title>
    <link href="http://yoursite.com/2018/02/24/moment-js/"/>
    <id>http://yoursite.com/2018/02/24/moment-js/</id>
    <published>2018-02-24T00:16:42.000Z</published>
    <updated>2018-02-24T00:19:02.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">moment.locale(<span class="string">'zh-cn'</span>);</span><br><span class="line"><span class="keyword">const</span> date = moment(<span class="string">"2018-2-15 19:20:01"</span>, <span class="string">"YYYY-MM-DD HH:mm:ss"</span>).calenda(<span class="literal">null</span>, &#123;</span><br><span class="line">  sameDay: <span class="string">'HH:mm'</span>,</span><br><span class="line">  nextDay: <span class="string">'[明天] HH:mm'</span>,</span><br><span class="line">  nextWeek: <span class="string">'dddd'</span>,</span><br><span class="line">  lastDay: <span class="string">'[昨天] HH:mm'</span>,</span><br><span class="line">  lastWeek: <span class="string">'上周dd HH:mm'</span>,</span><br><span class="line">  sameElse: <span class="string">"YYYY年MM月DD日"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React Native Debugger</title>
    <link href="http://yoursite.com/2018/02/02/react-native-debugger/"/>
    <id>http://yoursite.com/2018/02/02/react-native-debugger/</id>
    <published>2018-02-02T00:53:41.000Z</published>
    <updated>2018-02-02T01:01:21.686Z</updated>
    
    <content type="html"><![CDATA[<p>RN集成了redux之后，测试工具必不可少。使用React Native Debugger可以完美解决该问题。</p><h2 id="安装（for-macOs）"><a href="#安装（for-macOs）" class="headerlink" title="安装（for macOs）"></a>安装（for macOs）</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew update &amp;&amp; brew cask install react-native-debugger</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open <span class="string">"rndebugger://set-debugger-loc?host=localhost&amp;port=8081"</span></span><br></pre></td></tr></table></figure><p><strong>Then: </strong><br>在模拟器或真机上打开”Debug Js Remotely”选项</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;RN集成了redux之后，测试工具必不可少。使用React Native Debugger可以完美解决该问题。&lt;/p&gt;
&lt;h2 id=&quot;安装（for-macOs）&quot;&gt;&lt;a href=&quot;#安装（for-macOs）&quot; class=&quot;headerlink&quot; title=&quot;安装（
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES7 新语法</title>
    <link href="http://yoursite.com/2018/01/31/es7/"/>
    <id>http://yoursite.com/2018/01/31/es7/</id>
    <published>2018-01-31T05:18:20.000Z</published>
    <updated>2018-01-31T05:59:06.446Z</updated>
    
    <content type="html"><![CDATA[<h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="Object-definePropert"><a href="#Object-definePropert" class="headerlink" title="Object.definePropert"></a>Object.definePropert</h3><p>在了解装饰器之前，先要熟悉Object.defineProperty，该方法可以用来定义对象中Porp的属性。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.definePropery(object, prop, descriptor)</span><br></pre></td></tr></table></figure></p><p>该方法接受三个参数：</p><ul><li>object 对象名；</li><li>prop 属性名；</li><li>descriptor 属性描述符。</li></ul><p>Example:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someOne = &#123; &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(someOne, <span class="string">"name"</span>, &#123;</span><br><span class="line">    value:<span class="string">"coverguo"</span> , <span class="comment">//由于设定了writable属性为false 导致这个量不可以修改</span></span><br><span class="line">    writable: <span class="literal">false</span> </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="built_in">console</span>.log(someOne.name); <span class="comment">// 输出 coverguo</span></span><br><span class="line">someOne.name = <span class="string">"linkzhu"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(someOne.name); <span class="comment">// 输出coverguo</span></span><br></pre></td></tr></table></figure></p><p>descriptor参数可以取以下值：</p><ul><li>value:属性的值</li><li>writable:如果为false，属性的值就不能被重写,只能为只读了</li><li>configurable:总开关，一旦为false，就不能再设置他的（value，writable，configurable）</li><li>enumerable:是否能在for…in循环中遍历出来或在Object.keys中列举出来。</li><li>get: 自定义取值时触发</li><li>set: 自定义在赋值时促发的函数</li></ul><h3 id="decorator语法"><a href="#decorator语法" class="headerlink" title="decorator语法"></a>decorator语法</h3><p>decorator接受的参数与Object.defineProperty一致.<br>Example: 定义一个只读的装饰器<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target, key, descriptor</span>) </span>&#123;</span><br><span class="line">  descriptor.writable = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">return</span> descriptor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用方式:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">  @readonly</span><br><span class="line">  bark () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'wang!wang!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog()</span><br><span class="line">dog.bark = <span class="string">'bark!bark!'</span></span><br><span class="line"><span class="comment">// Cannot assign to read only property 'bark' of [object Object]</span></span><br></pre></td></tr></table></figure></p><h3 id="作用在类上的decorator"><a href="#作用在类上的decorator" class="headerlink" title="作用在类上的decorator"></a>作用在类上的decorator</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 `target` 是类本身</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doge</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.isDoge = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@doge</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Dog.isDoge)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>decorator 也可以是 factory function<br>如果我们想对不同的目标对象应用同一个 decorator，但同时又需要有一些差别，怎么办？很简单：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doge</span> (<span class="params">isDoge</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    target.isDoge = isDoge</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@doge(<span class="literal">true</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Dog.isDoge)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">@doge(<span class="literal">false</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Human.isDoge)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>如果想对一个类或者一个方法附加新的机制，又不想破坏其原本的结构（利于复用），该新语法值得一用。<br>react 高阶组件：</p><ul><li>react-redux connect；</li><li>redux-form。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;装饰器&quot;&gt;&lt;a href=&quot;#装饰器&quot; class=&quot;headerlink&quot; title=&quot;装饰器&quot;&gt;&lt;/a&gt;装饰器&lt;/h2&gt;&lt;h3 id=&quot;Object-definePropert&quot;&gt;&lt;a href=&quot;#Object-definePropert&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Harray Potter —— 1</title>
    <link href="http://yoursite.com/2018/01/20/HarryPotter-md/"/>
    <id>http://yoursite.com/2018/01/20/HarryPotter-md/</id>
    <published>2018-01-20T07:04:44.000Z</published>
    <updated>2018-02-10T04:03:35.237Z</updated>
    
    <content type="html"><![CDATA[<p><strong>triumph</strong><br>英  [‘traɪʌmf]   美  [ˈtraɪəmf]<br>n. 胜利，凯旋；欢欣<br>vi. 获得胜利，成功</p><p><strong>scale</strong><br>英  [skeɪl]   美  [skel]<br>n. 规模；比例；鳞；刻度；天平；数值范围<br>vi. 衡量；攀登；剥落；生水垢<br>vt. 测量；攀登；刮鳞；依比例决定</p><p><strong>supernatural</strong><br>英  [,suːpə’nætʃ(ə)r(ə)l; ,sjuː-]   美  [,supɚ’nætʃrəl]<br>adj. 超自然的；神奇的，不可思议的<br>n. 超自然现象；不可思议的事</p><p><strong>even while the supernatural is popping out all over</strong><br>即使在超自然的情况下也是如此</p><p><strong>sly</strong><br>英  [slaɪ]   美  [slaɪ]<br>adj. 狡猾的；淘气的；诡密的</p><p><strong>humor</strong><br>英  [ˈhjuːmə]   美  [‘hjʊmɚ]<br>n. 幽默，诙谐；心情<br>vt. 迎合，迁就；顺应</p><p><strong>impressively</strong><br>[im’presivli]<br>adv. 令人难忘地；感人地</p><p><strong>seamlessly</strong><br>英  [‘si:mlisli]   美  [‘si:mlisli]<br>adv. 无缝地</p><p><strong>narrative</strong><br>英  [‘nærətɪv]   美  [‘nærətɪv]<br>n. 叙述；故事；讲述<br>adj. 叙事的，叙述的；叙事体的</p><p><strong>sorcerer</strong><br>英  [‘sɔːs(ə)rə]   美  [‘sɔrsərɚ]<br>n. 魔术师；男巫士</p><p><strong>wizardry</strong><br>英  [‘wɪzədrɪ]   美  [‘wɪzɚdri]<br>n. 巫术，魔法</p><p><strong>soar</strong><br>英  [sɔː]   美  [sɔr]<br>vi. 高飞；高耸；往上飞舞<br>n. 高飞；高涨<br>n. (Soar)人名；(英、葡)索尔</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;triumph&lt;/strong&gt;&lt;br&gt;英  [‘traɪʌmf]   美  [ˈtraɪəmf]&lt;br&gt;n. 胜利，凯旋；欢欣&lt;br&gt;vi. 获得胜利，成功&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;scale&lt;/strong&gt;&lt;br&gt;英  [skeɪl]   美  
      
    
    </summary>
    
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>Android学习笔记——用户界面</title>
    <link href="http://yoursite.com/2018/01/19/android-interface/"/>
    <id>http://yoursite.com/2018/01/19/android-interface/</id>
    <published>2018-01-19T06:44:12.000Z</published>
    <updated>2018-02-20T07:54:30.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h2><p><strong>app &gt; java &gt; com.example.myfirstapp &gt; MainActivity.java</strong><br>这是主 Activity。当构建和运行应用时，系统会启动此 Activity 的实例并加载其布局。</p><p><strong>app &gt; res &gt; layout &gt; activity_main.xml</strong><br>布局文件，类似jsx。</p><p><strong>app &gt; manifests &gt; AndroidManifest.xml</strong><br>manifest 文件描述应用的基本特性并定义其每个组件。</p><p><strong>Gradle Scripts &gt; build.gradle</strong><br>会看到具有此名称的两个文件：一个用于项目，一个用于“应用”模块。每个模块均有自己的 build.gradle 文件，但此项目当前仅有一个模块。</p><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="编写XML"><a href="#编写XML" class="headerlink" title="编写XML"></a>编写XML</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:text</span>=<span class="string">"Hello, I am a TextView"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"Hello, I am a Button"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:id=&quot;@+id/my_button&quot;</span><br></pre></td></tr></table></figure><p>类似于html中的id，可以通过id来捕获该对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Button myButton = (Button) findViewById(R.id.my_button);</span><br></pre></td></tr></table></figure><p>加号的意思是会在R.java文件也就是安卓的资源文件中生成响应的id号。如果id已存在，则去掉加号使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:id=&quot;@id/my_button&quot;</span><br></pre></td></tr></table></figure><h4 id="布局参数"><a href="#布局参数" class="headerlink" title="布局参数"></a>布局参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">android:layout_height=&quot;match_parent&quot;</span><br></pre></td></tr></table></figure><ul><li><strong>wrap_content</strong> 指示您的视图将其大小调整为内容所需的尺寸。</li><li><strong>match_parent</strong> 指示您的视图尽可能采用其父视图组所允许的最大尺寸。</li></ul><h2 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h2><p>线性布局会根据权重将屏幕分割成水平或者竖直的视图块。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"@string/to"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"@string/subject"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"top"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"@string/message"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"@string/send"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>android:orientation</strong>: 指定布局方向, horizontal(水平)或vertical(竖直)</li><li><strong>android:layout_weight</strong>: 权重属性,如不设置则为0。权重为0的时候，组件只占用内容所需区域。</li></ul><h2 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h2><p>相对布局和web开发中的相对位置类似，可以将组件相对于父母或者兄弟元素进行相应的移动, 如果不设置相应的参数，那么组件将默认出现在父母组件的左上角。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingLeft</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:paddingRight</span>=<span class="string">"16dp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"Reminder"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Spinner</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/dates"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentLeft</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_toLeftOf</span>=<span class="string">"@+id/times"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Spinner</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@id/times"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"96dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"96dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_below</span>=<span class="string">"@id/times"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentRight</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Done"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>android:layout_alignParentTop</strong>: true / false</li><li><strong>android:layout_centerVertical</strong>: true / false</li><li><strong>android:layout_below</strong>: id </li><li><strong>android:layout_toRightOf</strong>: id</li></ul><h2 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h2><p>类似于html中的表格，不常用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TableLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"one"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_span</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"two"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"three"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TableRow</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"one"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"two"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"two"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"three"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TableRow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TableLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>android:collapseColumns</strong>:设置需要被隐藏的列的序号</li><li><strong>android:shrinkColumns</strong>:设置允许被收缩的列的列序号</li><li><strong>android:stretchColumns</strong>:设置运行被拉伸的列的列序号</li></ul><p>以上这三个属性的列号都是从0开始算的,比如shrinkColunmns = “2”,对应的是第三列！<br>可以设置多个,用逗号隔开比如”0,2”,如果是所有列都生效,则用”*”号即可<br>除了这三个常用属性,还有两个属性,分别就是跳格子以及合并单元格,这和HTML中的Table类似:</p><ul><li><strong>android:layout_column=”2”</strong>:表示的就是跳过第二个,直接显示到第三个格子处,从1开始算的!</li><li><strong>android:layout_span=”4”</strong>:表示合并4个单元格,也就说这个组件占4个单元格</li></ul><h3 id="网格布局"><a href="#网格布局" class="headerlink" title="网格布局"></a>网格布局</h3><p>与表格布局类似。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">GridLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:rowCount</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:columnCount</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"right"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_columnSpan</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">GridLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;重要文件&quot;&gt;&lt;a href=&quot;#重要文件&quot; class=&quot;headerlink&quot; title=&quot;重要文件&quot;&gt;&lt;/a&gt;重要文件&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;app &amp;gt; java &amp;gt; com.example.myfirstapp &amp;gt; MainAct
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>react-native-element</title>
    <link href="http://yoursite.com/2018/01/19/react-native-element/"/>
    <id>http://yoursite.com/2018/01/19/react-native-element/</id>
    <published>2018-01-19T05:53:44.000Z</published>
    <updated>2018-01-23T07:41:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单好用的 React Native 组件库。</p><h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; List, ListItem &#125; <span class="keyword">from</span> <span class="string">'react-native-elements'</span>;</span><br><span class="line">list = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'aaa'</span>, <span class="attr">value</span>: <span class="string">'123'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'bbb'</span>, <span class="attr">value</span>: <span class="string">'346'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ScrollView style=&#123;CommonStyles.container&#125;&gt;</span><br><span class="line">      &lt;List containerStyle=&#123;CommonStyles.detailList&#125;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">this</span>.list.map(<span class="function">(<span class="params">l, i</span>) =&gt;</span> (</span><br><span class="line">            &lt;ListItem</span><br><span class="line">              key=&#123;i&#125;</span><br><span class="line">              title=&#123;l.name&#125;</span><br><span class="line">              rightTitle=&#123;l.value&#125;</span><br><span class="line">              hideChevron</span><br><span class="line">              containerStyle=&#123;CommonStyles.detailListItemContainer&#125;</span><br><span class="line">              wrapperStyle=&#123;CommonStyles.detailListItemWrapper&#125;</span><br><span class="line">              titleStyle=&#123;[CommonStyles.label, &#123; <span class="attr">marginLeft</span>: <span class="number">0</span> &#125;]&#125;</span><br><span class="line">              rightTitleStyle=&#123;CommonStyles.text&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          ))</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;<span class="regexp">/List&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>ScrollView&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;简单好用的 React Native 组件库。&lt;/p&gt;
&lt;h2 id=&quot;Lists&quot;&gt;&lt;a href=&quot;#Lists&quot; class=&quot;headerlink&quot; title=&quot;Lists&quot;&gt;&lt;/a&gt;Lists&lt;/h2&gt;&lt;h3 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; clas
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>React Native 列表组件</title>
    <link href="http://yoursite.com/2018/01/14/rn-listView/"/>
    <id>http://yoursite.com/2018/01/14/rn-listView/</id>
    <published>2018-01-14T08:30:17.000Z</published>
    <updated>2018-01-16T01:39:44.076Z</updated>
    
    <content type="html"><![CDATA[<p>React Native 提供了三种列表组件，分别是：ListView，FlatList 和 SectionList，由于 ListView 已经被弃用，便不再进行详细的说明，本章节主要介绍 FlatList 和 SectionList 的常用属性。</p><h2 id="FaltList"><a href="#FaltList" class="headerlink" title="FaltList"></a>FaltList</h2><p>高性能的简单列表组件，具有以下便利的特性：</p><ul><li>完全跨平台；</li><li>支持水平布局模式；</li><li>行组件显示或隐藏时可配置回调事件；</li><li>支持单独的头部组件；</li><li>支持单独的尾部组件；</li><li>支持自定义行间分隔线；</li><li>支持下拉刷新；</li><li>支持上拉加载；</li><li>支持跳转到指定行（ScrollToIndex）。</li></ul><h3 id="官方例子解析（解决惰性渲染问题）"><a href="#官方例子解析（解决惰性渲染问题）" class="headerlink" title="官方例子解析（解决惰性渲染问题）"></a>官方例子解析（解决惰性渲染问题）</h3><p>由于 FlatList 的惰性渲染，当除了 data 属性以外的数据改变时，可能无法导致界面的重新渲染，因此要通过 extraData 属性来解决该问题,下面上代码.</p><p>/components/MyList.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View, Text, TouchableOpacity &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyListItem</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  _onPress = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.props._onPressItem(<span class="keyword">this</span>.props.id);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> textColor = <span class="keyword">this</span>.props.selected ? <span class="string">'red'</span> : <span class="string">'black'</span>;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;TouchableOpacity onPress=&#123;<span class="keyword">this</span>._onPress&#125;&gt;</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">          &lt;Text style=&#123;&#123; <span class="attr">color</span>: textColor &#125;&#125;&gt;&#123;<span class="keyword">this</span>.props.title&#125;&lt;<span class="regexp">/Text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>View&gt;</span><br><span class="line">      &lt;<span class="regexp">/TouchableOpacity&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const MyList = &#123;</span></span><br><span class="line"><span class="regexp">  MyListItem</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">export default MyList;</span></span><br></pre></td></tr></table></figure><p>/containers/Devices.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FlatList &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"><span class="keyword">import</span> MyList <span class="keyword">from</span> <span class="string">'../components/MyListItem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'台式机'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'笔记本'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'苹果手机'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Devices</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      selected: <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定是用id代替key</span></span><br><span class="line">  _keyExtrator = <span class="function"><span class="params">item</span> =&gt;</span> item.id;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// onPress事件触发，构造列表项可以被选中的效果</span></span><br><span class="line">  _onPressItem = <span class="function"><span class="params">id</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> selected = <span class="keyword">new</span> <span class="built_in">Map</span>(prevState.selected);</span><br><span class="line">      selected.set(id, !selected.get(id));</span><br><span class="line">      <span class="built_in">console</span>.log(selected);</span><br><span class="line">      <span class="keyword">return</span> &#123; selected &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 列表项渲染</span></span><br><span class="line">  _renderItem = <span class="function">(<span class="params">&#123; item &#125;</span>) =&gt;</span> (</span><br><span class="line">    &lt;MyList.MyListItem</span><br><span class="line">      id=&#123;item.id&#125;</span><br><span class="line">      _onPressItem=&#123;<span class="keyword">this</span>._onPressItem&#125;</span><br><span class="line">      selected=&#123;!!<span class="keyword">this</span>.state.selected.get(item.id)&#125;</span><br><span class="line">      title=&#123;item.title&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;FlatList</span><br><span class="line">        data=&#123;data&#125;</span><br><span class="line">        extraData=&#123;<span class="keyword">this</span>.state&#125;</span><br><span class="line">        keyExtractor=&#123;<span class="keyword">this</span>._keyExtrator&#125;</span><br><span class="line">        renderItem=&#123;<span class="keyword">this</span>._renderItem&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Devices;</span><br></pre></td></tr></table></figure><p>在这个例子中，构造了“列表项被点击选中时，其内容变红色，再次点击，取消中选中时，其内容变回黑色”这样一个简单的效果,通过父组中 state.selected 来记录相应的列表项是否被选中，同时将改值赋予 FlatList 的 extraData 属性，使其可以被 FlatList 识别。同还用到了其他属性：</p><ul><li>data (指定填充列表的数据，通常为数组)；</li><li>keyExtractor (react 规定所有数据为数组类型的组件，数组的每一项必须指定一个 key 属性以区别于其他数组项，类似与数据库中的主键，通过该属性，可以自己定制主键属性)。</li></ul><p>以此例子为基础，我们来展开对其它属性的学习。</p><h3 id="UI-属性"><a href="#UI-属性" class="headerlink" title="UI 属性"></a>UI 属性</h3><ul><li>ItemSeparatorComponent?: ?ReactClass<any> （行与行之间的分隔线组件。不会出现在第一行之前和最后一行之后。）</any></li><li>ListEmptyComponent?: ?ReactClass<any> | React.Element<any>(列表为空时渲染该组件。可以是 React Component, 也可以是一个 render 函数， 或者渲染好的 element。)</any></any></li><li>ListFooterComponent?: ?ReactClass<any> (尾部组件)</any></li><li>ListHeaderComponent?: ?ReactClass<any> (头部组件)</any></li></ul><p>/components/MyList.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">const ItemSeparatorComponent = () =&gt; (</span><br><span class="line">  &lt;View style=&#123;CommonStyles.separatorLine&#125; /&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const ListEmptyComponent = () =&gt; (</span><br><span class="line">  &lt;View style=&#123;&#123; flex: 1, alignItems: &apos;center&apos;, marginTop: 20 &#125;&#125;&gt;</span><br><span class="line">    &lt;Text style=&#123;CommonStyles.text&#125;&gt;当前没有任何数据!&lt;/Text&gt;</span><br><span class="line">  &lt;/View&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const ListHeaderComponent = (&#123; length = 0 &#125;) =&gt; (</span><br><span class="line">  &lt;View style=&#123;CommonStyles.listHeaderComponent&#125;&gt;</span><br><span class="line">    &lt;Text style=&#123;CommonStyles.smallText&#125;&gt;当前总共&#123;length&#125;条数据&lt;/Text&gt;</span><br><span class="line">  &lt;/View&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const ListFooterComponent = () =&gt; (</span><br><span class="line">  &lt;View style=&#123;CommonStyles.listHeaderComponent&#125;&gt;</span><br><span class="line">    &lt;Text style=&#123;CommonStyles.smallText&#125;&gt;已经到最下面了&lt;/Text&gt;</span><br><span class="line">  &lt;/View&gt;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const MyList = &#123;</span><br><span class="line">  MyListItem,</span><br><span class="line">  ItemSeparatorComponent,</span><br><span class="line">  ListEmptyComponent,</span><br><span class="line">  ListHeaderComponent,</span><br><span class="line">  ListFooterComponent</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>/containers/Devices.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;FlatList</span><br><span class="line">      data=&#123;data&#125;</span><br><span class="line">      extraData=&#123;<span class="keyword">this</span>.state&#125;</span><br><span class="line">      keyExtractor=&#123;<span class="keyword">this</span>._keyExtrator&#125;</span><br><span class="line">      renderItem=&#123;<span class="keyword">this</span>._renderItem&#125;</span><br><span class="line">      ItemSeparatorComponent=&#123;MyList.ItemSeparatorComponent&#125;</span><br><span class="line">      ListEmptyComponent=&#123;MyList.ListEmptyComponent&#125;</span><br><span class="line">      ListHeaderComponent=&#123;&lt;MyList.ListHeaderComponent lenght=&#123;data.length&#125; /&gt;&#125;</span><br><span class="line">      ListFooterComponent=&#123;MyList.ListFooterComponent&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h3><ul><li><strong>onRefresh</strong>?: ?() =&gt; void (如果设置了此选项，则会在列表头部添加一个标准的RefreshControl控件，以便实现“下拉刷新”的功能。同时你需要正确设置refreshing属性。)</li><li><strong>refreshing</strong>?: ?boolean (在等待加载新数据时将此属性设为true，列表就会显示出一个正在加载的符号。)</li></ul><p>如果不喜欢默认的刷新器的颜色，可通过指定属性refreshControl来定制舒心器</p><p>/components/MyList.js<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyRefreshControl = <span class="function">(<span class="params">&#123; refreshing = <span class="literal">false</span>, _onRefresh &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;RefreshControl</span><br><span class="line">    refreshing=&#123;refreshing&#125;</span><br><span class="line">    onRefresh=&#123;_onRefresh&#125;</span><br><span class="line">    title=<span class="string">"正在刷新界面"</span></span><br><span class="line">    tintColor=&#123;AppColor.THEME&#125;</span><br><span class="line">    titleColor=&#123;AppColor.FONT&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>/containers/Devices.js<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下拉刷新事件</span></span><br><span class="line">_onRefresh = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'refresh'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;FlatList</span><br><span class="line">  data=&#123;data&#125;</span><br><span class="line">  extraData=&#123;<span class="keyword">this</span>.state&#125;</span><br><span class="line">  keyExtractor=&#123;<span class="keyword">this</span>._keyExtrator&#125;</span><br><span class="line">  renderItem=&#123;<span class="keyword">this</span>._renderItem&#125;</span><br><span class="line">  ItemSeparatorComponent=&#123;MyList.ItemSeparatorComponent&#125;</span><br><span class="line">  ListEmptyComponent=&#123;MyList.ListEmptyComponent&#125;</span><br><span class="line">  ListHeaderComponent=&#123;</span><br><span class="line">    &lt;MyList.ListHeaderComponent lenght=&#123;data.length&#125; /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">  ListFooterComponent=&#123;MyList.ListFooterComponent&#125;</span><br><span class="line">  refreshControl=&#123;</span><br><span class="line">    &lt;MyList.MyRefreshControl</span><br><span class="line">      refreshing=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">      _onRefresh=&#123;<span class="keyword">this</span>._onRefresh&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></p><h3 id="上拉加载"><a href="#上拉加载" class="headerlink" title="上拉加载"></a>上拉加载</h3><ul><li><p><strong>onEndReached</strong>?: ?(info: {distanceFromEnd: number}) =&gt; void (当列表被滚动到距离内容最底部不足onEndReachedThreshold的距离时调用。)</p></li><li><p><strong>onEndReachedThreshold</strong>?: ?number (决定当距离内容最底部还有多远时触发onEndReached回调。注意此参数是一个比值而非像素单位。比如，0.5表示距离内容最底部的距离为当前列表可见长度的一半时触发。)</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React Native 提供了三种列表组件，分别是：ListView，FlatList 和 SectionList，由于 ListView 已经被弃用，便不再进行详细的说明，本章节主要介绍 FlatList 和 SectionList 的常用属性。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="react-native" scheme="http://yoursite.com/tags/react-native/"/>
    
  </entry>
  
</feed>
